-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_Padding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_a_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    conv_a_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    conv_a_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    conv_a_empty_n : IN STD_LOGIC;
    conv_a_read : OUT STD_LOGIC;
    conv3_samepad_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    conv3_samepad_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    conv3_samepad_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    conv3_samepad_full_n : IN STD_LOGIC;
    conv3_samepad_write : OUT STD_LOGIC;
    R_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    R_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    R_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    R_empty_n : IN STD_LOGIC;
    R_read : OUT STD_LOGIC;
    C_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    C_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    C_empty_n : IN STD_LOGIC;
    C_read : OUT STD_LOGIC;
    N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    N_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    N_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    N_empty_n : IN STD_LOGIC;
    N_read : OUT STD_LOGIC;
    M_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    M_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    M_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    M_empty_n : IN STD_LOGIC;
    M_read : OUT STD_LOGIC;
    P_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    P_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    P_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    P_empty_n : IN STD_LOGIC;
    P_read : OUT STD_LOGIC;
    mode_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    mode_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_empty_n : IN STD_LOGIC;
    mode_read : OUT STD_LOGIC;
    R_c45_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    R_c45_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    R_c45_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    R_c45_full_n : IN STD_LOGIC;
    R_c45_write : OUT STD_LOGIC;
    C_c47_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_c47_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    C_c47_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    C_c47_full_n : IN STD_LOGIC;
    C_c47_write : OUT STD_LOGIC;
    N_c50_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    N_c50_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    N_c50_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    N_c50_full_n : IN STD_LOGIC;
    N_c50_write : OUT STD_LOGIC;
    M_c55_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_c55_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    M_c55_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    M_c55_full_n : IN STD_LOGIC;
    M_c55_write : OUT STD_LOGIC;
    P_c59_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_c59_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    P_c59_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    P_c59_full_n : IN STD_LOGIC;
    P_c59_write : OUT STD_LOGIC;
    mode_c71_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    mode_c71_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_c71_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_c71_full_n : IN STD_LOGIC;
    mode_c71_write : OUT STD_LOGIC );
end;


architecture behav of top_Padding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal R_blk_n : STD_LOGIC;
    signal C_blk_n : STD_LOGIC;
    signal N_blk_n : STD_LOGIC;
    signal M_blk_n : STD_LOGIC;
    signal P_blk_n : STD_LOGIC;
    signal mode_blk_n : STD_LOGIC;
    signal R_c45_blk_n : STD_LOGIC;
    signal C_c47_blk_n : STD_LOGIC;
    signal N_c50_blk_n : STD_LOGIC;
    signal M_c55_blk_n : STD_LOGIC;
    signal P_c59_blk_n : STD_LOGIC;
    signal mode_c71_blk_n : STD_LOGIC;
    signal mode_3_read_fu_68_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_3_reg_252 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal P_3_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_3_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal R_3_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_cast_reg_276 : STD_LOGIC_VECTOR (27 downto 0);
    signal div13_cast_reg_281 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound_fu_172_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_reg_287 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal bound4_fu_176_p2 : STD_LOGIC_VECTOR (91 downto 0);
    signal bound4_reg_292 : STD_LOGIC_VECTOR (91 downto 0);
    signal add18_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add18_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add23_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add23_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound17_fu_167_p2 : STD_LOGIC_VECTOR (119 downto 0);
    signal bound17_reg_308 : STD_LOGIC_VECTOR (119 downto 0);
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start : STD_LOGIC;
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done : STD_LOGIC;
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_idle : STD_LOGIC;
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_ready : STD_LOGIC;
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read : STD_LOGIC;
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_din : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write : STD_LOGIC;
    signal grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal bound17_fu_167_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound17_fu_167_p1 : STD_LOGIC_VECTOR (91 downto 0);
    signal bound_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_172_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal bound4_fu_176_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound4_fu_176_p1 : STD_LOGIC_VECTOR (59 downto 0);
    signal empty_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add8_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal bound17_fu_167_p00 : STD_LOGIC_VECTOR (119 downto 0);
    signal bound17_fu_167_p10 : STD_LOGIC_VECTOR (119 downto 0);
    signal bound4_fu_176_p00 : STD_LOGIC_VECTOR (91 downto 0);
    signal bound4_fu_176_p10 : STD_LOGIC_VECTOR (91 downto 0);
    signal bound_fu_172_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal bound_fu_172_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_a_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        conv_a_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
        conv_a_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
        conv_a_empty_n : IN STD_LOGIC;
        conv_a_read : OUT STD_LOGIC;
        conv3_samepad_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        conv3_samepad_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        conv3_samepad_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        conv3_samepad_full_n : IN STD_LOGIC;
        conv3_samepad_write : OUT STD_LOGIC;
        bound17 : IN STD_LOGIC_VECTOR (119 downto 0);
        bound4 : IN STD_LOGIC_VECTOR (91 downto 0);
        div13_cast : IN STD_LOGIC_VECTOR (27 downto 0);
        bound : IN STD_LOGIC_VECTOR (59 downto 0);
        P_3 : IN STD_LOGIC_VECTOR (31 downto 0);
        add23 : IN STD_LOGIC_VECTOR (31 downto 0);
        add18 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_28ns_92ns_120_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (91 downto 0);
        dout : OUT STD_LOGIC_VECTOR (119 downto 0) );
    end component;


    component top_mul_32ns_28ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component top_mul_32ns_60ns_92_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (59 downto 0);
        dout : OUT STD_LOGIC_VECTOR (91 downto 0) );
    end component;



begin
    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152 : component top_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start,
        ap_done => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done,
        ap_idle => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_idle,
        ap_ready => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_ready,
        conv_a_dout => conv_a_dout,
        conv_a_num_data_valid => ap_const_lv8_0,
        conv_a_fifo_cap => ap_const_lv8_0,
        conv_a_empty_n => conv_a_empty_n,
        conv_a_read => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read,
        conv3_samepad_din => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_din,
        conv3_samepad_num_data_valid => ap_const_lv4_0,
        conv3_samepad_fifo_cap => ap_const_lv4_0,
        conv3_samepad_full_n => conv3_samepad_full_n,
        conv3_samepad_write => grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write,
        bound17 => bound17_reg_308,
        bound4 => bound4_reg_292,
        div13_cast => div13_cast_reg_281,
        bound => bound_reg_287,
        P_3 => P_3_reg_256,
        add23 => add23_reg_303,
        add18 => add18_reg_298);

    mul_28ns_92ns_120_1_1_U603 : component top_mul_28ns_92ns_120_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 92,
        dout_WIDTH => 120)
    port map (
        din0 => bound17_fu_167_p0,
        din1 => bound17_fu_167_p1,
        dout => bound17_fu_167_p2);

    mul_32ns_28ns_60_1_1_U604 : component top_mul_32ns_28ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 28,
        dout_WIDTH => 60)
    port map (
        din0 => bound_fu_172_p0,
        din1 => bound_fu_172_p1,
        dout => bound_fu_172_p2);

    mul_32ns_60ns_92_1_1_U605 : component top_mul_32ns_60ns_92_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 60,
        dout_WIDTH => 92)
    port map (
        din0 => bound4_fu_176_p0,
        din1 => bound4_fu_176_p1,
        dout => bound4_fu_176_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_ready = ap_const_logic_1)) then 
                    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                C_3_reg_264 <= C_dout;
                P_3_reg_256 <= P_dout;
                R_3_reg_270 <= R_dout;
                div13_cast_reg_281 <= N_dout(31 downto 4);
                div_cast_reg_276 <= M_dout(31 downto 4);
                mode_3_reg_252 <= mode_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add18_reg_298 <= add18_fu_234_p2;
                add23_reg_303 <= add23_fu_239_p2;
                bound17_reg_308 <= bound17_fu_167_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound4_reg_292 <= bound4_fu_176_p2;
                bound_reg_287 <= bound_fu_172_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, mode_3_read_fu_68_p2, ap_block_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1) and (mode_3_read_fu_68_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1) and (mode_3_read_fu_68_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    C_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_blk_n <= C_empty_n;
        else 
            C_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    C_c47_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, C_c47_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_c47_blk_n <= C_c47_full_n;
        else 
            C_c47_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_c47_din <= C_dout;

    C_c47_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            C_c47_write <= ap_const_logic_1;
        else 
            C_c47_write <= ap_const_logic_0;
        end if; 
    end process;


    C_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            C_read <= ap_const_logic_1;
        else 
            C_read <= ap_const_logic_0;
        end if; 
    end process;


    M_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, M_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            M_blk_n <= M_empty_n;
        else 
            M_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    M_c55_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, M_c55_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            M_c55_blk_n <= M_c55_full_n;
        else 
            M_c55_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_c55_din <= M_dout;

    M_c55_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            M_c55_write <= ap_const_logic_1;
        else 
            M_c55_write <= ap_const_logic_0;
        end if; 
    end process;


    M_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            M_read <= ap_const_logic_1;
        else 
            M_read <= ap_const_logic_0;
        end if; 
    end process;


    N_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_blk_n <= N_empty_n;
        else 
            N_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_c50_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_c50_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_c50_blk_n <= N_c50_full_n;
        else 
            N_c50_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    N_c50_din <= N_dout;

    N_c50_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            N_c50_write <= ap_const_logic_1;
        else 
            N_c50_write <= ap_const_logic_0;
        end if; 
    end process;


    N_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            N_read <= ap_const_logic_1;
        else 
            N_read <= ap_const_logic_0;
        end if; 
    end process;


    P_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, P_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_blk_n <= P_empty_n;
        else 
            P_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    P_c59_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, P_c59_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_c59_blk_n <= P_c59_full_n;
        else 
            P_c59_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    P_c59_din <= P_dout;

    P_c59_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            P_c59_write <= ap_const_logic_1;
        else 
            P_c59_write <= ap_const_logic_0;
        end if; 
    end process;


    P_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            P_read <= ap_const_logic_1;
        else 
            P_read <= ap_const_logic_0;
        end if; 
    end process;


    R_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, R_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_blk_n <= R_empty_n;
        else 
            R_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    R_c45_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, R_c45_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_c45_blk_n <= R_c45_full_n;
        else 
            R_c45_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    R_c45_din <= R_dout;

    R_c45_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            R_c45_write <= ap_const_logic_1;
        else 
            R_c45_write <= ap_const_logic_0;
        end if; 
    end process;


    R_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            R_read <= ap_const_logic_1;
        else 
            R_read <= ap_const_logic_0;
        end if; 
    end process;

    add18_fu_234_p2 <= std_logic_vector(unsigned(P_3_reg_256) + unsigned(C_3_reg_264));
    add23_fu_239_p2 <= std_logic_vector(unsigned(P_3_reg_256) + unsigned(R_3_reg_270));
    add8_fu_210_p2 <= std_logic_vector(unsigned(C_3_reg_264) + unsigned(empty_fu_200_p2));
    add_fu_205_p2 <= std_logic_vector(unsigned(R_3_reg_270) + unsigned(empty_fu_200_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, R_empty_n, C_empty_n, N_empty_n, M_empty_n, P_empty_n, mode_empty_n, R_c45_full_n, C_c47_full_n, N_c50_full_n, M_c55_full_n, P_c59_full_n, mode_c71_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (mode_empty_n = ap_const_logic_0) or (ap_const_logic_0 = M_c55_full_n) or (ap_const_logic_0 = N_c50_full_n) or (ap_const_logic_0 = C_c47_full_n) or (ap_const_logic_0 = R_c45_full_n) or (ap_const_logic_0 = P_empty_n) or (ap_const_logic_0 = M_empty_n) or (ap_const_logic_0 = N_empty_n) or (ap_const_logic_0 = C_empty_n) or (ap_const_logic_0 = R_empty_n) or (ap_const_logic_0 = P_c59_full_n) or (ap_done_reg = ap_const_logic_1) or (mode_c71_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(mode_3_reg_252, grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done = ap_const_logic_0) and (mode_3_reg_252 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound17_fu_167_p0 <= bound17_fu_167_p00(28 - 1 downto 0);
    bound17_fu_167_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div_cast_reg_276),120));
    bound17_fu_167_p1 <= bound17_fu_167_p10(92 - 1 downto 0);
    bound17_fu_167_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound4_reg_292),120));
    bound4_fu_176_p0 <= bound4_fu_176_p00(32 - 1 downto 0);
    bound4_fu_176_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_fu_205_p2),92));
    bound4_fu_176_p1 <= bound4_fu_176_p10(60 - 1 downto 0);
    bound4_fu_176_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_172_p2),92));
    bound_fu_172_p0 <= bound_fu_172_p00(32 - 1 downto 0);
    bound_fu_172_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add8_fu_210_p2),60));
    bound_fu_172_p1 <= bound_fu_172_p10(28 - 1 downto 0);
    bound_fu_172_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div13_cast_reg_281),60));
    conv3_samepad_din <= grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_din;

    conv3_samepad_write_assign_proc : process(mode_3_reg_252, grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (mode_3_reg_252 = ap_const_lv1_1))) then 
            conv3_samepad_write <= grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write;
        else 
            conv3_samepad_write <= ap_const_logic_0;
        end if; 
    end process;


    conv_a_read_assign_proc : process(mode_3_reg_252, grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (mode_3_reg_252 = ap_const_lv1_1))) then 
            conv_a_read <= grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read;
        else 
            conv_a_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_200_p2 <= std_logic_vector(shift_left(unsigned(P_3_reg_256),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start <= grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg;
    mode_3_read_fu_68_p2 <= mode_dout;

    mode_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mode_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_blk_n <= mode_empty_n;
        else 
            mode_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mode_c71_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mode_c71_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_c71_blk_n <= mode_c71_full_n;
        else 
            mode_c71_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mode_c71_din <= mode_dout;

    mode_c71_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            mode_c71_write <= ap_const_logic_1;
        else 
            mode_c71_write <= ap_const_logic_0;
        end if; 
    end process;


    mode_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            mode_read <= ap_const_logic_1;
        else 
            mode_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
