// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_VITIS_LOOP_30_5_VITIS_LOOP_33_6_VITIS_LOOP_36_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RFIFONUM,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        mm_a_din,
        mm_a_full_n,
        mm_a_write,
        mul_ln32_3,
        N,
        mul_ln32_2,
        Conv_MM_A
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [63:0] m_axi_A_BUS_AWADDR;
output  [0:0] m_axi_A_BUS_AWID;
output  [31:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [0:0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [127:0] m_axi_A_BUS_WDATA;
output  [15:0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [0:0] m_axi_A_BUS_WID;
output  [0:0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [63:0] m_axi_A_BUS_ARADDR;
output  [0:0] m_axi_A_BUS_ARID;
output  [31:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [0:0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [127:0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [0:0] m_axi_A_BUS_RID;
input  [8:0] m_axi_A_BUS_RFIFONUM;
input  [0:0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [0:0] m_axi_A_BUS_BID;
input  [0:0] m_axi_A_BUS_BUSER;
output  [127:0] mm_a_din;
input   mm_a_full_n;
output   mm_a_write;
input  [87:0] mul_ln32_3;
input  [31:0] N;
input  [59:0] mul_ln32_2;
input  [63:0] Conv_MM_A;

reg ap_idle;
reg m_axi_A_BUS_ARVALID;
reg m_axi_A_BUS_RREADY;
reg mm_a_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
reg   [0:0] or_ln33_reg_403;
reg    ap_block_state3_io;
reg   [0:0] icmp_ln30_reg_399;
reg   [0:0] icmp_ln30_reg_399_pp0_iter9_reg;
reg    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] icmp_ln30_reg_399_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln30_fu_189_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_BUS_blk_n_R;
wire    ap_block_pp0_stage0;
reg    A_BUS_blk_n_AR;
reg    mm_a_blk_n;
reg   [0:0] first_iter_2_reg_144;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln30_reg_399_pp0_iter2_reg;
reg   [0:0] icmp_ln30_reg_399_pp0_iter3_reg;
reg   [0:0] icmp_ln30_reg_399_pp0_iter4_reg;
reg   [0:0] icmp_ln30_reg_399_pp0_iter5_reg;
reg   [0:0] icmp_ln30_reg_399_pp0_iter6_reg;
reg   [0:0] icmp_ln30_reg_399_pp0_iter7_reg;
reg   [0:0] icmp_ln30_reg_399_pp0_iter8_reg;
wire   [0:0] or_ln33_fu_246_p2;
reg   [59:0] trunc_ln3_reg_407;
reg   [127:0] A_BUS_addr_read_reg_418;
reg   [0:0] ap_phi_mux_first_iter_2_phi_fu_148_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln36_fu_338_p1;
reg   [31:0] n_fu_86;
wire   [31:0] select_ln36_fu_296_p3;
reg   [59:0] indvar_flatten40_fu_90;
wire   [59:0] select_ln33_fu_310_p3;
reg   [27:0] r_fu_94;
wire   [27:0] select_ln30_1_fu_238_p3;
reg   [87:0] indvar_flatten53_fu_98;
wire   [87:0] add_ln30_1_fu_194_p2;
reg    ap_block_pp0_stage0_01001;
wire   [27:0] empty_41_fu_156_p0;
wire   [0:0] icmp_ln33_fu_209_p2;
wire  signed [31:0] icmp_ln36_fu_220_p0;
wire  signed [31:0] icmp_ln36_1_fu_225_p1;
wire   [0:0] icmp_ln36_fu_220_p2;
wire   [0:0] icmp_ln36_1_fu_225_p2;
wire   [27:0] add_ln30_fu_203_p2;
wire   [0:0] select_ln30_fu_230_p3;
wire   [0:0] or_ln30_fu_214_p2;
wire   [31:0] empty_41_fu_156_p2;
wire   [35:0] tmp_s_fu_257_p3;
wire   [63:0] p_cast14_fu_265_p1;
wire   [63:0] empty_42_fu_269_p2;
wire   [0:0] or_ln36_fu_290_p2;
wire   [31:0] add_ln36_fu_284_p2;
wire   [59:0] add_ln33_fu_304_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] empty_41_fu_156_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 n_fu_86 = 32'd0;
#0 indvar_flatten40_fu_90 = 60'd0;
#0 r_fu_94 = 28'd0;
#0 indvar_flatten53_fu_98 = 88'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_28ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_28ns_32s_32_1_1_U1(
    .din0(empty_41_fu_156_p0),
    .din1(N),
    .dout(empty_41_fu_156_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_399 == 1'd0))) begin
        first_iter_2_reg_144 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_2_reg_144 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten40_fu_90 <= 60'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_fu_189_p2 == 1'd0))) begin
            indvar_flatten40_fu_90 <= select_ln33_fu_310_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten53_fu_98 <= 88'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_fu_189_p2 == 1'd0))) begin
            indvar_flatten53_fu_98 <= add_ln30_1_fu_194_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            n_fu_86 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_fu_189_p2 == 1'd0))) begin
            n_fu_86 <= select_ln36_fu_296_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            r_fu_94 <= 28'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln30_fu_189_p2 == 1'd0))) begin
            r_fu_94 <= select_ln30_1_fu_238_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        A_BUS_addr_read_reg_418 <= m_axi_A_BUS_RDATA;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln30_reg_399_pp0_iter10_reg <= icmp_ln30_reg_399_pp0_iter9_reg;
        icmp_ln30_reg_399_pp0_iter2_reg <= icmp_ln30_reg_399;
        icmp_ln30_reg_399_pp0_iter3_reg <= icmp_ln30_reg_399_pp0_iter2_reg;
        icmp_ln30_reg_399_pp0_iter4_reg <= icmp_ln30_reg_399_pp0_iter3_reg;
        icmp_ln30_reg_399_pp0_iter5_reg <= icmp_ln30_reg_399_pp0_iter4_reg;
        icmp_ln30_reg_399_pp0_iter6_reg <= icmp_ln30_reg_399_pp0_iter5_reg;
        icmp_ln30_reg_399_pp0_iter7_reg <= icmp_ln30_reg_399_pp0_iter6_reg;
        icmp_ln30_reg_399_pp0_iter8_reg <= icmp_ln30_reg_399_pp0_iter7_reg;
        icmp_ln30_reg_399_pp0_iter9_reg <= icmp_ln30_reg_399_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln30_reg_399 <= icmp_ln30_fu_189_p2;
        or_ln33_reg_403 <= or_ln33_fu_246_p2;
        trunc_ln3_reg_407 <= {{empty_42_fu_269_p2[63:4]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln33_reg_403 == 1'd1))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_399_pp0_iter9_reg == 1'd0))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln30_fu_189_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_399 == 1'd0))) begin
        ap_phi_mux_first_iter_2_phi_fu_148_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_2_phi_fu_148_p4 = first_iter_2_reg_144;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln33_reg_403 == 1'd1))) begin
        m_axi_A_BUS_ARVALID = 1'b1;
    end else begin
        m_axi_A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_399_pp0_iter9_reg == 1'd0))) begin
        m_axi_A_BUS_RREADY = 1'b1;
    end else begin
        m_axi_A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln30_reg_399_pp0_iter10_reg == 1'd0))) begin
        mm_a_blk_n = mm_a_full_n;
    end else begin
        mm_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln30_reg_399_pp0_iter10_reg == 1'd0))) begin
        mm_a_write = 1'b1;
    end else begin
        mm_a_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln30_1_fu_194_p2 = (indvar_flatten53_fu_98 + 88'd1);

assign add_ln30_fu_203_p2 = (r_fu_94 + 28'd1);

assign add_ln33_fu_304_p2 = (indvar_flatten40_fu_90 + 60'd1);

assign add_ln36_fu_284_p2 = (n_fu_86 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((m_axi_A_BUS_RVALID == 1'b0) & (icmp_ln30_reg_399_pp0_iter9_reg == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln30_reg_399_pp0_iter10_reg == 1'd0) & (mm_a_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_A_BUS_ARREADY == 1'b0) & (or_ln33_reg_403 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign empty_41_fu_156_p0 = empty_41_fu_156_p00;

assign empty_41_fu_156_p00 = select_ln30_1_fu_238_p3;

assign empty_42_fu_269_p2 = (p_cast14_fu_265_p1 + Conv_MM_A);

assign icmp_ln30_fu_189_p2 = ((indvar_flatten53_fu_98 == mul_ln32_3) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_209_p2 = ((indvar_flatten40_fu_90 == mul_ln32_2) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_225_p1 = N;

assign icmp_ln36_1_fu_225_p2 = ((n_fu_86 == icmp_ln36_1_fu_225_p1) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_220_p0 = N;

assign icmp_ln36_fu_220_p2 = ((icmp_ln36_fu_220_p0 == 32'd0) ? 1'b1 : 1'b0);

assign m_axi_A_BUS_ARADDR = sext_ln36_fu_338_p1;

assign m_axi_A_BUS_ARBURST = 2'd0;

assign m_axi_A_BUS_ARCACHE = 4'd0;

assign m_axi_A_BUS_ARID = 1'd0;

assign m_axi_A_BUS_ARLEN = N;

assign m_axi_A_BUS_ARLOCK = 2'd0;

assign m_axi_A_BUS_ARPROT = 3'd0;

assign m_axi_A_BUS_ARQOS = 4'd0;

assign m_axi_A_BUS_ARREGION = 4'd0;

assign m_axi_A_BUS_ARSIZE = 3'd0;

assign m_axi_A_BUS_ARUSER = 1'd0;

assign m_axi_A_BUS_AWADDR = 64'd0;

assign m_axi_A_BUS_AWBURST = 2'd0;

assign m_axi_A_BUS_AWCACHE = 4'd0;

assign m_axi_A_BUS_AWID = 1'd0;

assign m_axi_A_BUS_AWLEN = 32'd0;

assign m_axi_A_BUS_AWLOCK = 2'd0;

assign m_axi_A_BUS_AWPROT = 3'd0;

assign m_axi_A_BUS_AWQOS = 4'd0;

assign m_axi_A_BUS_AWREGION = 4'd0;

assign m_axi_A_BUS_AWSIZE = 3'd0;

assign m_axi_A_BUS_AWUSER = 1'd0;

assign m_axi_A_BUS_AWVALID = 1'b0;

assign m_axi_A_BUS_BREADY = 1'b0;

assign m_axi_A_BUS_WDATA = 128'd0;

assign m_axi_A_BUS_WID = 1'd0;

assign m_axi_A_BUS_WLAST = 1'b0;

assign m_axi_A_BUS_WSTRB = 16'd0;

assign m_axi_A_BUS_WUSER = 1'd0;

assign m_axi_A_BUS_WVALID = 1'b0;

assign mm_a_din = A_BUS_addr_read_reg_418;

assign or_ln30_fu_214_p2 = (icmp_ln33_fu_209_p2 | ap_phi_mux_first_iter_2_phi_fu_148_p4);

assign or_ln33_fu_246_p2 = (select_ln30_fu_230_p3 | or_ln30_fu_214_p2);

assign or_ln36_fu_290_p2 = (select_ln30_fu_230_p3 | icmp_ln33_fu_209_p2);

assign p_cast14_fu_265_p1 = tmp_s_fu_257_p3;

assign select_ln30_1_fu_238_p3 = ((icmp_ln33_fu_209_p2[0:0] == 1'b1) ? add_ln30_fu_203_p2 : r_fu_94);

assign select_ln30_fu_230_p3 = ((icmp_ln33_fu_209_p2[0:0] == 1'b1) ? icmp_ln36_fu_220_p2 : icmp_ln36_1_fu_225_p2);

assign select_ln33_fu_310_p3 = ((icmp_ln33_fu_209_p2[0:0] == 1'b1) ? 60'd1 : add_ln33_fu_304_p2);

assign select_ln36_fu_296_p3 = ((or_ln36_fu_290_p2[0:0] == 1'b1) ? 32'd1 : add_ln36_fu_284_p2);

assign sext_ln36_fu_338_p1 = $signed(trunc_ln3_reg_407);

assign tmp_s_fu_257_p3 = {{empty_41_fu_156_p2}, {4'd0}};

endmodule //top_top_Pipeline_VITIS_LOOP_30_5_VITIS_LOOP_33_6_VITIS_LOOP_36_7
