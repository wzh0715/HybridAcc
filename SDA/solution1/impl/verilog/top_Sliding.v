// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_Sliding (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        conv3_samepad_dout,
        conv3_samepad_num_data_valid,
        conv3_samepad_fifo_cap,
        conv3_samepad_empty_n,
        conv3_samepad_read,
        conv3_sild_din,
        conv3_sild_num_data_valid,
        conv3_sild_fifo_cap,
        conv3_sild_full_n,
        conv3_sild_write,
        R_dout,
        R_num_data_valid,
        R_fifo_cap,
        R_empty_n,
        R_read,
        C_dout,
        C_num_data_valid,
        C_fifo_cap,
        C_empty_n,
        C_read,
        N_dout,
        N_num_data_valid,
        N_fifo_cap,
        N_empty_n,
        N_read,
        M_dout,
        M_num_data_valid,
        M_fifo_cap,
        M_empty_n,
        M_read,
        K_dout,
        K_num_data_valid,
        K_fifo_cap,
        K_empty_n,
        K_read,
        P_dout,
        P_num_data_valid,
        P_fifo_cap,
        P_empty_n,
        P_read,
        S_dout,
        S_num_data_valid,
        S_fifo_cap,
        S_empty_n,
        S_read,
        mode_dout,
        mode_num_data_valid,
        mode_fifo_cap,
        mode_empty_n,
        mode_read,
        R_c44_din,
        R_c44_num_data_valid,
        R_c44_fifo_cap,
        R_c44_full_n,
        R_c44_write,
        C_c_din,
        C_c_num_data_valid,
        C_c_fifo_cap,
        C_c_full_n,
        C_c_write,
        N_c49_din,
        N_c49_num_data_valid,
        N_c49_fifo_cap,
        N_c49_full_n,
        N_c49_write,
        M_c54_din,
        M_c54_num_data_valid,
        M_c54_fifo_cap,
        M_c54_full_n,
        M_c54_write,
        K_c57_din,
        K_c57_num_data_valid,
        K_c57_fifo_cap,
        K_c57_full_n,
        K_c57_write,
        P_c_din,
        P_c_num_data_valid,
        P_c_fifo_cap,
        P_c_full_n,
        P_c_write,
        S_c_din,
        S_c_num_data_valid,
        S_c_fifo_cap,
        S_c_full_n,
        S_c_write,
        mode_c70_din,
        mode_c70_num_data_valid,
        mode_c70_fifo_cap,
        mode_c70_full_n,
        mode_c70_write
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_state3 = 39'd4;
parameter    ap_ST_fsm_state4 = 39'd8;
parameter    ap_ST_fsm_state5 = 39'd16;
parameter    ap_ST_fsm_state6 = 39'd32;
parameter    ap_ST_fsm_state7 = 39'd64;
parameter    ap_ST_fsm_state8 = 39'd128;
parameter    ap_ST_fsm_state9 = 39'd256;
parameter    ap_ST_fsm_state10 = 39'd512;
parameter    ap_ST_fsm_state11 = 39'd1024;
parameter    ap_ST_fsm_state12 = 39'd2048;
parameter    ap_ST_fsm_state13 = 39'd4096;
parameter    ap_ST_fsm_state14 = 39'd8192;
parameter    ap_ST_fsm_state15 = 39'd16384;
parameter    ap_ST_fsm_state16 = 39'd32768;
parameter    ap_ST_fsm_state17 = 39'd65536;
parameter    ap_ST_fsm_state18 = 39'd131072;
parameter    ap_ST_fsm_state19 = 39'd262144;
parameter    ap_ST_fsm_state20 = 39'd524288;
parameter    ap_ST_fsm_state21 = 39'd1048576;
parameter    ap_ST_fsm_state22 = 39'd2097152;
parameter    ap_ST_fsm_state23 = 39'd4194304;
parameter    ap_ST_fsm_state24 = 39'd8388608;
parameter    ap_ST_fsm_state25 = 39'd16777216;
parameter    ap_ST_fsm_state26 = 39'd33554432;
parameter    ap_ST_fsm_state27 = 39'd67108864;
parameter    ap_ST_fsm_state28 = 39'd134217728;
parameter    ap_ST_fsm_state29 = 39'd268435456;
parameter    ap_ST_fsm_state30 = 39'd536870912;
parameter    ap_ST_fsm_state31 = 39'd1073741824;
parameter    ap_ST_fsm_state32 = 39'd2147483648;
parameter    ap_ST_fsm_state33 = 39'd4294967296;
parameter    ap_ST_fsm_state34 = 39'd8589934592;
parameter    ap_ST_fsm_state35 = 39'd17179869184;
parameter    ap_ST_fsm_state36 = 39'd34359738368;
parameter    ap_ST_fsm_state37 = 39'd68719476736;
parameter    ap_ST_fsm_state38 = 39'd137438953472;
parameter    ap_ST_fsm_state39 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [511:0] conv3_samepad_dout;
input  [3:0] conv3_samepad_num_data_valid;
input  [3:0] conv3_samepad_fifo_cap;
input   conv3_samepad_empty_n;
output   conv3_samepad_read;
output  [511:0] conv3_sild_din;
input  [2:0] conv3_sild_num_data_valid;
input  [2:0] conv3_sild_fifo_cap;
input   conv3_sild_full_n;
output   conv3_sild_write;
input  [31:0] R_dout;
input  [2:0] R_num_data_valid;
input  [2:0] R_fifo_cap;
input   R_empty_n;
output   R_read;
input  [31:0] C_dout;
input  [2:0] C_num_data_valid;
input  [2:0] C_fifo_cap;
input   C_empty_n;
output   C_read;
input  [31:0] N_dout;
input  [2:0] N_num_data_valid;
input  [2:0] N_fifo_cap;
input   N_empty_n;
output   N_read;
input  [31:0] M_dout;
input  [2:0] M_num_data_valid;
input  [2:0] M_fifo_cap;
input   M_empty_n;
output   M_read;
input  [31:0] K_dout;
input  [2:0] K_num_data_valid;
input  [2:0] K_fifo_cap;
input   K_empty_n;
output   K_read;
input  [31:0] P_dout;
input  [2:0] P_num_data_valid;
input  [2:0] P_fifo_cap;
input   P_empty_n;
output   P_read;
input  [31:0] S_dout;
input  [2:0] S_num_data_valid;
input  [2:0] S_fifo_cap;
input   S_empty_n;
output   S_read;
input  [0:0] mode_dout;
input  [2:0] mode_num_data_valid;
input  [2:0] mode_fifo_cap;
input   mode_empty_n;
output   mode_read;
output  [31:0] R_c44_din;
input  [2:0] R_c44_num_data_valid;
input  [2:0] R_c44_fifo_cap;
input   R_c44_full_n;
output   R_c44_write;
output  [31:0] C_c_din;
input  [3:0] C_c_num_data_valid;
input  [3:0] C_c_fifo_cap;
input   C_c_full_n;
output   C_c_write;
output  [31:0] N_c49_din;
input  [2:0] N_c49_num_data_valid;
input  [2:0] N_c49_fifo_cap;
input   N_c49_full_n;
output   N_c49_write;
output  [31:0] M_c54_din;
input  [3:0] M_c54_num_data_valid;
input  [3:0] M_c54_fifo_cap;
input   M_c54_full_n;
output   M_c54_write;
output  [31:0] K_c57_din;
input  [3:0] K_c57_num_data_valid;
input  [3:0] K_c57_fifo_cap;
input   K_c57_full_n;
output   K_c57_write;
output  [31:0] P_c_din;
input  [3:0] P_c_num_data_valid;
input  [3:0] P_c_fifo_cap;
input   P_c_full_n;
output   P_c_write;
output  [31:0] S_c_din;
input  [3:0] S_c_num_data_valid;
input  [3:0] S_c_fifo_cap;
input   S_c_full_n;
output   S_c_write;
output  [0:0] mode_c70_din;
input  [2:0] mode_c70_num_data_valid;
input  [2:0] mode_c70_fifo_cap;
input   mode_c70_full_n;
output   mode_c70_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg conv3_samepad_read;
reg conv3_sild_write;
reg R_read;
reg C_read;
reg N_read;
reg M_read;
reg K_read;
reg P_read;
reg S_read;
reg mode_read;
reg R_c44_write;
reg C_c_write;
reg N_c49_write;
reg M_c54_write;
reg K_c57_write;
reg P_c_write;
reg S_c_write;
reg mode_c70_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    R_blk_n;
reg    C_blk_n;
reg    N_blk_n;
reg    M_blk_n;
reg    K_blk_n;
reg    P_blk_n;
reg    S_blk_n;
reg    mode_blk_n;
reg    R_c44_blk_n;
reg    C_c_blk_n;
reg    N_c49_blk_n;
reg    M_c54_blk_n;
reg    K_c57_blk_n;
reg    P_c_blk_n;
reg    S_c_blk_n;
reg    mode_c70_blk_n;
reg   [27:0] reg_248;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire   [0:0] mode_1_read_fu_80_p2;
reg   [0:0] mode_1_reg_412;
reg    ap_block_state1;
reg  signed [31:0] S_1_reg_416;
reg   [31:0] K_1_reg_425;
reg  signed [31:0] N_1_reg_433;
wire   [11:0] empty_fu_253_p1;
reg   [11:0] empty_reg_441;
wire  signed [31:0] add_ln95_fu_263_p2;
reg   [31:0] add_ln95_reg_446;
wire   [31:0] add_ln98_fu_281_p2;
reg   [31:0] add_ln98_reg_457;
reg   [27:0] div29_cast_reg_467;
wire  signed [31:0] add_ln95_1_fu_314_p2;
reg   [31:0] add_ln95_1_reg_472;
wire   [31:0] cycles_write_block_fu_221_p2;
reg   [31:0] cycles_write_block_reg_477;
wire   [31:0] cycles_read_block_fu_225_p2;
reg   [31:0] cycles_read_block_reg_484;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] udiv_ln98_reg_491;
wire  signed [31:0] max_cycles_fu_340_p3;
reg   [31:0] max_cycles_reg_496;
wire    ap_CS_fsm_state37;
wire   [31:0] baseIter_fu_357_p2;
reg   [31:0] baseIter_reg_501;
wire   [59:0] mul_ln93_fu_217_p2;
reg   [59:0] mul_ln93_reg_507;
reg   [27:0] div_reg_512;
wire    ap_CS_fsm_state38;
reg   [11:0] div42_cast_reg_517;
wire   [31:0] sub143_fu_392_p2;
reg   [31:0] sub143_reg_522;
wire   [31:0] add63_fu_398_p2;
reg   [31:0] add63_reg_527;
wire   [3:0] trunc_ln156_fu_403_p1;
reg   [3:0] trunc_ln156_reg_532;
wire   [3:0] trunc_ln158_fu_407_p1;
reg   [3:0] trunc_ln158_reg_537;
wire    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start;
wire    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done;
wire    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_idle;
wire    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_ready;
wire    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read;
wire   [511:0] grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_din;
wire    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write;
reg    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg;
wire    ap_CS_fsm_state39;
wire   [27:0] mul_ln93_fu_217_p0;
wire   [31:0] mul_ln93_fu_217_p1;
wire  signed [31:0] cycles_write_block_fu_221_p0;
wire   [27:0] cycles_write_block_fu_221_p1;
wire   [27:0] cycles_read_block_fu_225_p1;
reg  signed [31:0] grp_fu_229_p0;
wire  signed [31:0] grp_fu_233_p2;
reg  signed [31:0] grp_fu_229_p1;
wire  signed [31:0] add_ln98_1_fu_351_p2;
reg  signed [31:0] grp_fu_233_p0;
reg  signed [31:0] grp_fu_233_p1;
wire   [31:0] grp_fu_229_p2;
wire  signed [31:0] empty_fu_253_p0;
wire   [31:0] shl_ln95_fu_257_p2;
wire  signed [31:0] sub_ln95_fu_269_p1;
wire   [31:0] grp_fu_275_p0;
wire  signed [31:0] sub_ln98_fu_287_p1;
wire   [31:0] grp_fu_293_p0;
wire   [31:0] grp_fu_275_p2;
wire   [27:0] lshr_ln1_fu_321_p4;
wire   [0:0] icmp_ln97_fu_336_p2;
wire   [31:0] zext_ln98_fu_347_p1;
reg    grp_fu_275_ap_start;
wire    grp_fu_275_ap_done;
reg    grp_fu_275_ce;
reg    grp_fu_293_ap_start;
wire    grp_fu_293_ap_done;
reg    grp_fu_293_ce;
reg    ap_block_state39_on_subcall_done;
reg   [38:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
wire   [31:0] cycles_read_block_fu_225_p10;
wire   [31:0] cycles_write_block_fu_221_p10;
wire   [59:0] mul_ln93_fu_217_p00;
wire   [59:0] mul_ln93_fu_217_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 39'd1;
#0 grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg = 1'b0;
end

top_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2 grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start),
    .ap_done(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done),
    .ap_idle(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_idle),
    .ap_ready(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_ready),
    .conv3_samepad_dout(conv3_samepad_dout),
    .conv3_samepad_num_data_valid(4'd0),
    .conv3_samepad_fifo_cap(4'd0),
    .conv3_samepad_empty_n(conv3_samepad_empty_n),
    .conv3_samepad_read(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read),
    .conv3_sild_din(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_din),
    .conv3_sild_num_data_valid(3'd0),
    .conv3_sild_fifo_cap(3'd0),
    .conv3_sild_full_n(conv3_sild_full_n),
    .conv3_sild_write(grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write),
    .mul_ln93(mul_ln93_reg_507),
    .sub143(sub143_reg_522),
    .div42_cast(div42_cast_reg_517),
    .empty_48(div_reg_512),
    .baseIter(baseIter_reg_501),
    .zext_ln98(reg_248),
    .add_ln95(add_ln95_reg_446),
    .max_cycles(max_cycles_reg_496),
    .cycles_read_block(cycles_read_block_reg_484),
    .add_ln98(add_ln98_reg_457),
    .cycles_write_block(cycles_write_block_reg_477),
    .add63(add63_reg_527),
    .empty_49(empty_reg_441),
    .add_ln95_1(add_ln95_1_reg_472),
    .K_1(K_1_reg_425),
    .empty_50(trunc_ln156_reg_532),
    .empty(trunc_ln158_reg_537)
);

top_mul_28ns_32ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 60 ))
mul_28ns_32ns_60_1_1_U649(
    .din0(mul_ln93_fu_217_p0),
    .din1(mul_ln93_fu_217_p1),
    .dout(mul_ln93_fu_217_p2)
);

top_mul_32s_28ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_32s_28ns_32_1_1_U650(
    .din0(cycles_write_block_fu_221_p0),
    .din1(cycles_write_block_fu_221_p1),
    .dout(cycles_write_block_fu_221_p2)
);

top_mul_32s_28ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_32s_28ns_32_1_1_U651(
    .din0(S_1_reg_416),
    .din1(cycles_read_block_fu_225_p1),
    .dout(cycles_read_block_fu_225_p2)
);

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U652(
    .din0(grp_fu_229_p0),
    .din1(grp_fu_229_p1),
    .dout(grp_fu_229_p2)
);

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U653(
    .din0(grp_fu_233_p0),
    .din1(grp_fu_233_p1),
    .dout(grp_fu_233_p2)
);

top_udiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32ns_32s_32_36_seq_1_U654(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_275_ap_start),
    .done(grp_fu_275_ap_done),
    .din0(grp_fu_275_p0),
    .din1(S_dout),
    .ce(grp_fu_275_ce),
    .dout(grp_fu_275_p2)
);

top_udiv_32ns_32s_32_36_seq_1 #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
udiv_32ns_32s_32_36_seq_1_U655(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_293_ap_start),
    .done(grp_fu_293_ap_done),
    .din0(grp_fu_293_p0),
    .din1(S_dout),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state39_on_subcall_done) & (1'b1 == ap_CS_fsm_state39))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state38)) begin
            grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg <= 1'b1;
        end else if ((grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_ready == 1'b1)) begin
            grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        K_1_reg_425 <= K_dout;
        N_1_reg_433 <= N_dout;
        S_1_reg_416 <= S_dout;
        add_ln95_reg_446 <= add_ln95_fu_263_p2;
        add_ln98_reg_457 <= add_ln98_fu_281_p2;
        div29_cast_reg_467 <= {{M_dout[31:4]}};
        empty_reg_441 <= empty_fu_253_p1;
        mode_1_reg_412 <= mode_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        add63_reg_527 <= add63_fu_398_p2;
        div42_cast_reg_517 <= {{N_1_reg_433[15:4]}};
        div_reg_512 <= {{N_1_reg_433[31:4]}};
        sub143_reg_522 <= sub143_fu_392_p2;
        trunc_ln156_reg_532 <= trunc_ln156_fu_403_p1;
        trunc_ln158_reg_537 <= trunc_ln158_fu_407_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        add_ln95_1_reg_472 <= add_ln95_1_fu_314_p2;
        cycles_read_block_reg_484 <= cycles_read_block_fu_225_p2;
        cycles_write_block_reg_477 <= cycles_write_block_fu_221_p2;
        udiv_ln98_reg_491 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        baseIter_reg_501 <= baseIter_fu_357_p2;
        max_cycles_reg_496 <= max_cycles_fu_340_p3;
        mul_ln93_reg_507 <= mul_ln93_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_248 <= {{grp_fu_229_p2[31:4]}};
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_blk_n = C_empty_n;
    end else begin
        C_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_c_blk_n = C_c_full_n;
    end else begin
        C_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        C_c_write = 1'b1;
    end else begin
        C_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        C_read = 1'b1;
    end else begin
        C_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        K_blk_n = K_empty_n;
    end else begin
        K_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        K_c57_blk_n = K_c57_full_n;
    end else begin
        K_c57_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        K_c57_write = 1'b1;
    end else begin
        K_c57_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        K_read = 1'b1;
    end else begin
        K_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        M_blk_n = M_empty_n;
    end else begin
        M_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        M_c54_blk_n = M_c54_full_n;
    end else begin
        M_c54_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        M_c54_write = 1'b1;
    end else begin
        M_c54_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        M_read = 1'b1;
    end else begin
        M_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_c49_blk_n = N_c49_full_n;
    end else begin
        N_c49_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        N_c49_write = 1'b1;
    end else begin
        N_c49_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        P_blk_n = P_empty_n;
    end else begin
        P_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        P_c_blk_n = P_c_full_n;
    end else begin
        P_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        P_c_write = 1'b1;
    end else begin
        P_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        P_read = 1'b1;
    end else begin
        P_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_blk_n = R_empty_n;
    end else begin
        R_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_c44_blk_n = R_c44_full_n;
    end else begin
        R_c44_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        R_c44_write = 1'b1;
    end else begin
        R_c44_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        R_read = 1'b1;
    end else begin
        R_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_blk_n = S_empty_n;
    end else begin
        S_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        S_c_blk_n = S_c_full_n;
    end else begin
        S_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        S_c_write = 1'b1;
    end else begin
        S_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        S_read = 1'b1;
    end else begin
        S_read = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state39_on_subcall_done)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_state39_on_subcall_done) & (1'b1 == ap_CS_fsm_state39))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((mode_1_reg_412 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        conv3_samepad_read = grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read;
    end else begin
        conv3_samepad_read = 1'b0;
    end
end

always @ (*) begin
    if (((mode_1_reg_412 == 1'd1) & (1'b1 == ap_CS_fsm_state39))) begin
        conv3_sild_write = grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write;
    end else begin
        conv3_sild_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_229_p0 = max_cycles_fu_340_p3;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_fu_229_p0 = grp_fu_233_p2;
    end else begin
        grp_fu_229_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        grp_fu_229_p1 = add_ln98_1_fu_351_p2;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35))) begin
        grp_fu_229_p1 = K_1_reg_425;
    end else begin
        grp_fu_229_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_233_p0 = N_1_reg_433;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_233_p0 = K_1_reg_425;
    end else begin
        grp_fu_233_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        grp_fu_233_p1 = add_ln95_reg_446;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        grp_fu_233_p1 = N_1_reg_433;
    end else begin
        grp_fu_233_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (mode_1_read_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_275_ap_start = 1'b1;
    end else begin
        grp_fu_275_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        grp_fu_275_ce = 1'b0;
    end else begin
        grp_fu_275_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (mode_1_read_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_293_ap_start = 1'b1;
    end else begin
        grp_fu_293_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        grp_fu_293_ce = 1'b0;
    end else begin
        grp_fu_293_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state39_on_subcall_done) & (1'b1 == ap_CS_fsm_state39))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_blk_n = mode_empty_n;
    end else begin
        mode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_c70_blk_n = mode_c70_full_n;
    end else begin
        mode_c70_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_c70_write = 1'b1;
    end else begin
        mode_c70_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_read = 1'b1;
    end else begin
        mode_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (mode_1_read_fu_80_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else if (((1'b0 == ap_block_state1) & (mode_1_read_fu_80_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            if (((1'b0 == ap_block_state39_on_subcall_done) & (1'b1 == ap_CS_fsm_state39))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_c_din = C_dout;

assign K_c57_din = K_dout;

assign M_c54_din = M_dout;

assign N_c49_din = N_dout;

assign P_c_din = P_dout;

assign R_c44_din = R_dout;

assign S_c_din = S_dout;

assign add63_fu_398_p2 = ($signed(S_1_reg_416) + $signed(K_1_reg_425));

assign add_ln95_1_fu_314_p2 = (grp_fu_275_p2 + 32'd1);

assign add_ln95_fu_263_p2 = (C_dout + shl_ln95_fu_257_p2);

assign add_ln98_1_fu_351_p2 = (udiv_ln98_reg_491 + 32'd1);

assign add_ln98_fu_281_p2 = (R_dout + shl_ln95_fu_257_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (1'b0 == C_empty_n) | (1'b0 == R_empty_n) | (1'b0 == S_c_full_n) | (1'b0 == P_c_full_n) | (1'b0 == K_c57_full_n) | (1'b0 == M_c54_full_n) | (1'b0 == N_c49_full_n) | (1'b0 == C_c_full_n) | (1'b0 == R_c44_full_n) | (1'b0 == S_empty_n) | (1'b0 == P_empty_n) | (1'b0 == K_empty_n) | (1'b0 == M_empty_n) | (1'b0 == N_empty_n) | (mode_c70_full_n == 1'b0) | (mode_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state39_on_subcall_done = ((grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done == 1'b0) & (mode_1_reg_412 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign baseIter_fu_357_p2 = (grp_fu_229_p2 + zext_ln98_fu_347_p1);

assign conv3_sild_din = grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_din;

assign cycles_read_block_fu_225_p1 = cycles_read_block_fu_225_p10;

assign cycles_read_block_fu_225_p10 = lshr_ln1_fu_321_p4;

assign cycles_write_block_fu_221_p0 = (grp_fu_275_p2 + 32'd1);

assign cycles_write_block_fu_221_p1 = cycles_write_block_fu_221_p10;

assign cycles_write_block_fu_221_p10 = reg_248;

assign empty_fu_253_p0 = S_dout;

assign empty_fu_253_p1 = empty_fu_253_p0[11:0];

assign grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start = grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg;

assign grp_fu_275_p0 = ($signed(add_ln95_fu_263_p2) - $signed(sub_ln95_fu_269_p1));

assign grp_fu_293_p0 = ($signed(add_ln98_fu_281_p2) - $signed(sub_ln98_fu_287_p1));

assign icmp_ln97_fu_336_p2 = ((cycles_write_block_reg_477 > cycles_read_block_reg_484) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_321_p4 = {{grp_fu_233_p2[31:4]}};

assign max_cycles_fu_340_p3 = ((icmp_ln97_fu_336_p2[0:0] == 1'b1) ? cycles_write_block_reg_477 : cycles_read_block_reg_484);

assign mode_1_read_fu_80_p2 = mode_dout;

assign mode_c70_din = mode_dout;

assign mul_ln93_fu_217_p0 = mul_ln93_fu_217_p00;

assign mul_ln93_fu_217_p00 = div29_cast_reg_467;

assign mul_ln93_fu_217_p1 = mul_ln93_fu_217_p10;

assign mul_ln93_fu_217_p10 = baseIter_fu_357_p2;

assign shl_ln95_fu_257_p2 = P_dout << 32'd1;

assign start_out = real_start;

assign sub143_fu_392_p2 = ($signed(baseIter_reg_501) + $signed(32'd4294967295));

assign sub_ln95_fu_269_p1 = K_dout;

assign sub_ln98_fu_287_p1 = K_dout;

assign trunc_ln156_fu_403_p1 = S_1_reg_416[3:0];

assign trunc_ln158_fu_407_p1 = add63_fu_398_p2[3:0];

assign zext_ln98_fu_347_p1 = reg_248;

endmodule //top_Sliding
