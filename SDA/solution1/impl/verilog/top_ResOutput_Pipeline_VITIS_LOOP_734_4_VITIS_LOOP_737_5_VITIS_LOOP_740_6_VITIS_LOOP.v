// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_ResOutput_Pipeline_VITIS_LOOP_734_4_VITIS_LOOP_737_5_VITIS_LOOP_740_6_VITIS_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        MM_OUT_14_dout,
        MM_OUT_14_num_data_valid,
        MM_OUT_14_fifo_cap,
        MM_OUT_14_empty_n,
        MM_OUT_14_read,
        MM_OUT_13_dout,
        MM_OUT_13_num_data_valid,
        MM_OUT_13_fifo_cap,
        MM_OUT_13_empty_n,
        MM_OUT_13_read,
        MM_OUT_12_dout,
        MM_OUT_12_num_data_valid,
        MM_OUT_12_fifo_cap,
        MM_OUT_12_empty_n,
        MM_OUT_12_read,
        MM_OUT_11_dout,
        MM_OUT_11_num_data_valid,
        MM_OUT_11_fifo_cap,
        MM_OUT_11_empty_n,
        MM_OUT_11_read,
        MM_OUT_10_dout,
        MM_OUT_10_num_data_valid,
        MM_OUT_10_fifo_cap,
        MM_OUT_10_empty_n,
        MM_OUT_10_read,
        MM_OUT_9_dout,
        MM_OUT_9_num_data_valid,
        MM_OUT_9_fifo_cap,
        MM_OUT_9_empty_n,
        MM_OUT_9_read,
        MM_OUT_8_dout,
        MM_OUT_8_num_data_valid,
        MM_OUT_8_fifo_cap,
        MM_OUT_8_empty_n,
        MM_OUT_8_read,
        MM_OUT_7_dout,
        MM_OUT_7_num_data_valid,
        MM_OUT_7_fifo_cap,
        MM_OUT_7_empty_n,
        MM_OUT_7_read,
        MM_OUT_6_dout,
        MM_OUT_6_num_data_valid,
        MM_OUT_6_fifo_cap,
        MM_OUT_6_empty_n,
        MM_OUT_6_read,
        MM_OUT_5_dout,
        MM_OUT_5_num_data_valid,
        MM_OUT_5_fifo_cap,
        MM_OUT_5_empty_n,
        MM_OUT_5_read,
        MM_OUT_4_dout,
        MM_OUT_4_num_data_valid,
        MM_OUT_4_fifo_cap,
        MM_OUT_4_empty_n,
        MM_OUT_4_read,
        MM_OUT_3_dout,
        MM_OUT_3_num_data_valid,
        MM_OUT_3_fifo_cap,
        MM_OUT_3_empty_n,
        MM_OUT_3_read,
        MM_OUT_2_dout,
        MM_OUT_2_num_data_valid,
        MM_OUT_2_fifo_cap,
        MM_OUT_2_empty_n,
        MM_OUT_2_read,
        MM_OUT_1_dout,
        MM_OUT_1_num_data_valid,
        MM_OUT_1_fifo_cap,
        MM_OUT_1_empty_n,
        MM_OUT_1_read,
        MM_OUT_0_dout,
        MM_OUT_0_num_data_valid,
        MM_OUT_0_fifo_cap,
        MM_OUT_0_empty_n,
        MM_OUT_0_read,
        MM_OUT_15_dout,
        MM_OUT_15_num_data_valid,
        MM_OUT_15_fifo_cap,
        MM_OUT_15_empty_n,
        MM_OUT_15_read,
        m_axi_OUTPUT_BUS_AWVALID,
        m_axi_OUTPUT_BUS_AWREADY,
        m_axi_OUTPUT_BUS_AWADDR,
        m_axi_OUTPUT_BUS_AWID,
        m_axi_OUTPUT_BUS_AWLEN,
        m_axi_OUTPUT_BUS_AWSIZE,
        m_axi_OUTPUT_BUS_AWBURST,
        m_axi_OUTPUT_BUS_AWLOCK,
        m_axi_OUTPUT_BUS_AWCACHE,
        m_axi_OUTPUT_BUS_AWPROT,
        m_axi_OUTPUT_BUS_AWQOS,
        m_axi_OUTPUT_BUS_AWREGION,
        m_axi_OUTPUT_BUS_AWUSER,
        m_axi_OUTPUT_BUS_WVALID,
        m_axi_OUTPUT_BUS_WREADY,
        m_axi_OUTPUT_BUS_WDATA,
        m_axi_OUTPUT_BUS_WSTRB,
        m_axi_OUTPUT_BUS_WLAST,
        m_axi_OUTPUT_BUS_WID,
        m_axi_OUTPUT_BUS_WUSER,
        m_axi_OUTPUT_BUS_ARVALID,
        m_axi_OUTPUT_BUS_ARREADY,
        m_axi_OUTPUT_BUS_ARADDR,
        m_axi_OUTPUT_BUS_ARID,
        m_axi_OUTPUT_BUS_ARLEN,
        m_axi_OUTPUT_BUS_ARSIZE,
        m_axi_OUTPUT_BUS_ARBURST,
        m_axi_OUTPUT_BUS_ARLOCK,
        m_axi_OUTPUT_BUS_ARCACHE,
        m_axi_OUTPUT_BUS_ARPROT,
        m_axi_OUTPUT_BUS_ARQOS,
        m_axi_OUTPUT_BUS_ARREGION,
        m_axi_OUTPUT_BUS_ARUSER,
        m_axi_OUTPUT_BUS_RVALID,
        m_axi_OUTPUT_BUS_RREADY,
        m_axi_OUTPUT_BUS_RDATA,
        m_axi_OUTPUT_BUS_RLAST,
        m_axi_OUTPUT_BUS_RID,
        m_axi_OUTPUT_BUS_RFIFONUM,
        m_axi_OUTPUT_BUS_RUSER,
        m_axi_OUTPUT_BUS_RRESP,
        m_axi_OUTPUT_BUS_BVALID,
        m_axi_OUTPUT_BUS_BREADY,
        m_axi_OUTPUT_BUS_BRESP,
        m_axi_OUTPUT_BUS_BID,
        m_axi_OUTPUT_BUS_BUSER,
        bound37,
        output_1,
        bound24,
        M_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] MM_OUT_14_dout;
input  [2:0] MM_OUT_14_num_data_valid;
input  [2:0] MM_OUT_14_fifo_cap;
input   MM_OUT_14_empty_n;
output   MM_OUT_14_read;
input  [31:0] MM_OUT_13_dout;
input  [2:0] MM_OUT_13_num_data_valid;
input  [2:0] MM_OUT_13_fifo_cap;
input   MM_OUT_13_empty_n;
output   MM_OUT_13_read;
input  [31:0] MM_OUT_12_dout;
input  [2:0] MM_OUT_12_num_data_valid;
input  [2:0] MM_OUT_12_fifo_cap;
input   MM_OUT_12_empty_n;
output   MM_OUT_12_read;
input  [31:0] MM_OUT_11_dout;
input  [2:0] MM_OUT_11_num_data_valid;
input  [2:0] MM_OUT_11_fifo_cap;
input   MM_OUT_11_empty_n;
output   MM_OUT_11_read;
input  [31:0] MM_OUT_10_dout;
input  [2:0] MM_OUT_10_num_data_valid;
input  [2:0] MM_OUT_10_fifo_cap;
input   MM_OUT_10_empty_n;
output   MM_OUT_10_read;
input  [31:0] MM_OUT_9_dout;
input  [2:0] MM_OUT_9_num_data_valid;
input  [2:0] MM_OUT_9_fifo_cap;
input   MM_OUT_9_empty_n;
output   MM_OUT_9_read;
input  [31:0] MM_OUT_8_dout;
input  [2:0] MM_OUT_8_num_data_valid;
input  [2:0] MM_OUT_8_fifo_cap;
input   MM_OUT_8_empty_n;
output   MM_OUT_8_read;
input  [31:0] MM_OUT_7_dout;
input  [2:0] MM_OUT_7_num_data_valid;
input  [2:0] MM_OUT_7_fifo_cap;
input   MM_OUT_7_empty_n;
output   MM_OUT_7_read;
input  [31:0] MM_OUT_6_dout;
input  [2:0] MM_OUT_6_num_data_valid;
input  [2:0] MM_OUT_6_fifo_cap;
input   MM_OUT_6_empty_n;
output   MM_OUT_6_read;
input  [31:0] MM_OUT_5_dout;
input  [2:0] MM_OUT_5_num_data_valid;
input  [2:0] MM_OUT_5_fifo_cap;
input   MM_OUT_5_empty_n;
output   MM_OUT_5_read;
input  [31:0] MM_OUT_4_dout;
input  [2:0] MM_OUT_4_num_data_valid;
input  [2:0] MM_OUT_4_fifo_cap;
input   MM_OUT_4_empty_n;
output   MM_OUT_4_read;
input  [31:0] MM_OUT_3_dout;
input  [2:0] MM_OUT_3_num_data_valid;
input  [2:0] MM_OUT_3_fifo_cap;
input   MM_OUT_3_empty_n;
output   MM_OUT_3_read;
input  [31:0] MM_OUT_2_dout;
input  [2:0] MM_OUT_2_num_data_valid;
input  [2:0] MM_OUT_2_fifo_cap;
input   MM_OUT_2_empty_n;
output   MM_OUT_2_read;
input  [31:0] MM_OUT_1_dout;
input  [2:0] MM_OUT_1_num_data_valid;
input  [2:0] MM_OUT_1_fifo_cap;
input   MM_OUT_1_empty_n;
output   MM_OUT_1_read;
input  [31:0] MM_OUT_0_dout;
input  [2:0] MM_OUT_0_num_data_valid;
input  [2:0] MM_OUT_0_fifo_cap;
input   MM_OUT_0_empty_n;
output   MM_OUT_0_read;
input  [31:0] MM_OUT_15_dout;
input  [2:0] MM_OUT_15_num_data_valid;
input  [2:0] MM_OUT_15_fifo_cap;
input   MM_OUT_15_empty_n;
output   MM_OUT_15_read;
output   m_axi_OUTPUT_BUS_AWVALID;
input   m_axi_OUTPUT_BUS_AWREADY;
output  [63:0] m_axi_OUTPUT_BUS_AWADDR;
output  [0:0] m_axi_OUTPUT_BUS_AWID;
output  [31:0] m_axi_OUTPUT_BUS_AWLEN;
output  [2:0] m_axi_OUTPUT_BUS_AWSIZE;
output  [1:0] m_axi_OUTPUT_BUS_AWBURST;
output  [1:0] m_axi_OUTPUT_BUS_AWLOCK;
output  [3:0] m_axi_OUTPUT_BUS_AWCACHE;
output  [2:0] m_axi_OUTPUT_BUS_AWPROT;
output  [3:0] m_axi_OUTPUT_BUS_AWQOS;
output  [3:0] m_axi_OUTPUT_BUS_AWREGION;
output  [0:0] m_axi_OUTPUT_BUS_AWUSER;
output   m_axi_OUTPUT_BUS_WVALID;
input   m_axi_OUTPUT_BUS_WREADY;
output  [31:0] m_axi_OUTPUT_BUS_WDATA;
output  [3:0] m_axi_OUTPUT_BUS_WSTRB;
output   m_axi_OUTPUT_BUS_WLAST;
output  [0:0] m_axi_OUTPUT_BUS_WID;
output  [0:0] m_axi_OUTPUT_BUS_WUSER;
output   m_axi_OUTPUT_BUS_ARVALID;
input   m_axi_OUTPUT_BUS_ARREADY;
output  [63:0] m_axi_OUTPUT_BUS_ARADDR;
output  [0:0] m_axi_OUTPUT_BUS_ARID;
output  [31:0] m_axi_OUTPUT_BUS_ARLEN;
output  [2:0] m_axi_OUTPUT_BUS_ARSIZE;
output  [1:0] m_axi_OUTPUT_BUS_ARBURST;
output  [1:0] m_axi_OUTPUT_BUS_ARLOCK;
output  [3:0] m_axi_OUTPUT_BUS_ARCACHE;
output  [2:0] m_axi_OUTPUT_BUS_ARPROT;
output  [3:0] m_axi_OUTPUT_BUS_ARQOS;
output  [3:0] m_axi_OUTPUT_BUS_ARREGION;
output  [0:0] m_axi_OUTPUT_BUS_ARUSER;
input   m_axi_OUTPUT_BUS_RVALID;
output   m_axi_OUTPUT_BUS_RREADY;
input  [31:0] m_axi_OUTPUT_BUS_RDATA;
input   m_axi_OUTPUT_BUS_RLAST;
input  [0:0] m_axi_OUTPUT_BUS_RID;
input  [8:0] m_axi_OUTPUT_BUS_RFIFONUM;
input  [0:0] m_axi_OUTPUT_BUS_RUSER;
input  [1:0] m_axi_OUTPUT_BUS_RRESP;
input   m_axi_OUTPUT_BUS_BVALID;
output   m_axi_OUTPUT_BUS_BREADY;
input  [1:0] m_axi_OUTPUT_BUS_BRESP;
input  [0:0] m_axi_OUTPUT_BUS_BID;
input  [0:0] m_axi_OUTPUT_BUS_BUSER;
input  [63:0] bound37;
input  [63:0] output_1;
input  [31:0] bound24;
input  [31:0] M_2;

reg ap_idle;
reg MM_OUT_14_read;
reg MM_OUT_13_read;
reg MM_OUT_12_read;
reg MM_OUT_11_read;
reg MM_OUT_10_read;
reg MM_OUT_9_read;
reg MM_OUT_8_read;
reg MM_OUT_7_read;
reg MM_OUT_6_read;
reg MM_OUT_5_read;
reg MM_OUT_4_read;
reg MM_OUT_3_read;
reg MM_OUT_2_read;
reg MM_OUT_1_read;
reg MM_OUT_0_read;
reg MM_OUT_15_read;
reg m_axi_OUTPUT_BUS_AWVALID;
reg m_axi_OUTPUT_BUS_WVALID;
reg m_axi_OUTPUT_BUS_BREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln734_reg_788;
reg   [3:0] or_ln_reg_792;
reg    ap_predicate_op109_read_state3;
reg    ap_predicate_op111_read_state3;
reg    ap_predicate_op113_read_state3;
reg    ap_predicate_op115_read_state3;
reg    ap_predicate_op117_read_state3;
reg    ap_predicate_op119_read_state3;
reg    ap_predicate_op121_read_state3;
reg    ap_predicate_op123_read_state3;
reg    ap_predicate_op125_read_state3;
reg    ap_predicate_op127_read_state3;
reg    ap_predicate_op129_read_state3;
reg    ap_predicate_op131_read_state3;
reg    ap_predicate_op133_read_state3;
reg    ap_predicate_op135_read_state3;
reg    ap_predicate_op137_read_state3;
reg    ap_predicate_op139_read_state3;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state9_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln734_fu_412_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    OUTPUT_BUS_blk_n_AW;
wire    ap_block_pp0_stage0;
reg    OUTPUT_BUS_blk_n_W;
reg    OUTPUT_BUS_blk_n_B;
reg    MM_OUT_0_blk_n;
reg    MM_OUT_1_blk_n;
reg    MM_OUT_2_blk_n;
reg    MM_OUT_3_blk_n;
reg    MM_OUT_4_blk_n;
reg    MM_OUT_5_blk_n;
reg    MM_OUT_6_blk_n;
reg    MM_OUT_7_blk_n;
reg    MM_OUT_8_blk_n;
reg    MM_OUT_9_blk_n;
reg    MM_OUT_10_blk_n;
reg    MM_OUT_11_blk_n;
reg    MM_OUT_12_blk_n;
reg    MM_OUT_13_blk_n;
reg    MM_OUT_14_blk_n;
reg    MM_OUT_15_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [32:0] bound24_cast_fu_364_p1;
reg   [32:0] bound24_cast_reg_783;
wire   [3:0] or_ln_fu_589_p3;
reg   [63:0] OUTPUT_BUS_addr_reg_796;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_reg_322;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_reg_322;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_reg_322;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_reg_322;
wire  signed [63:0] sext_ln744_fu_640_p1;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] s_fu_158;
wire   [2:0] add_ln742_fu_650_p2;
wire    ap_loop_init;
reg   [2:0] y_fu_162;
wire   [2:0] select_ln740_1_fu_565_p3;
reg   [5:0] indvar_flatten19_fu_166;
wire   [5:0] select_ln740_2_fu_662_p3;
reg   [27:0] j_fu_170;
wire   [27:0] select_ln737_1_fu_531_p3;
reg   [32:0] indvar_flatten32_fu_174;
wire   [32:0] select_ln737_2_fu_676_p3;
reg   [31:0] i_fu_178;
wire  signed [31:0] select_ln734_1_fu_478_p3;
reg   [63:0] indvar_flatten54_fu_182;
wire   [63:0] add_ln734_fu_417_p2;
wire  signed [31:0] mul58_fu_360_p1;
wire   [0:0] icmp_ln737_fu_441_p2;
wire   [0:0] icmp_ln740_fu_466_p2;
wire   [0:0] xor_ln734_fu_454_p2;
wire   [31:0] i_2_fu_435_p2;
wire   [27:0] select_ln734_fu_446_p3;
wire   [0:0] and_ln734_1_fu_472_p2;
wire   [0:0] or_ln737_fu_493_p2;
wire   [0:0] xor_ln737_fu_507_p2;
wire   [0:0] or_ln737_1_fu_513_p2;
wire   [0:0] and_ln734_fu_519_p2;
wire   [0:0] icmp_ln742_fu_460_p2;
wire   [27:0] add_ln737_fu_487_p2;
wire   [2:0] select_ln737_fu_499_p3;
wire   [0:0] and_ln737_fu_525_p2;
wire   [0:0] or_ln740_fu_545_p2;
wire   [0:0] or_ln740_1_fu_551_p2;
wire   [2:0] add_ln740_fu_539_p2;
wire   [2:0] select_ln740_fu_557_p3;
wire   [1:0] trunc_ln744_fu_585_p1;
wire   [1:0] empty_999_fu_581_p1;
wire   [31:0] tmp_s_fu_573_p3;
wire   [31:0] mul58_fu_360_p2;
wire   [31:0] zext_ln744_fu_603_p1;
wire   [31:0] add_ln744_fu_597_p2;
wire   [31:0] add_ln744_1_fu_607_p2;
wire   [33:0] shl_ln1_fu_613_p3;
wire   [63:0] zext_ln744_1_fu_621_p1;
wire   [63:0] add_ln744_2_fu_625_p2;
wire   [61:0] trunc_ln5_fu_630_p4;
wire   [5:0] add_ln740_1_fu_656_p2;
wire   [32:0] add_ln737_1_fu_670_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 s_fu_158 = 3'd0;
#0 y_fu_162 = 3'd0;
#0 indvar_flatten19_fu_166 = 6'd0;
#0 j_fu_170 = 28'd0;
#0 indvar_flatten32_fu_174 = 33'd0;
#0 i_fu_178 = 32'd0;
#0 indvar_flatten54_fu_182 = 64'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U3375(
    .din0(M_2),
    .din1(mul58_fu_360_p1),
    .dout(mul58_fu_360_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((or_ln_reg_792 == 4'd15) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_15_dout;
        end else if (((or_ln_reg_792 == 4'd14) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_14_dout;
        end else if (((or_ln_reg_792 == 4'd13) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_13_dout;
        end else if (((or_ln_reg_792 == 4'd12) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_12_dout;
        end else if (((or_ln_reg_792 == 4'd11) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_11_dout;
        end else if (((or_ln_reg_792 == 4'd10) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_10_dout;
        end else if (((or_ln_reg_792 == 4'd9) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_9_dout;
        end else if (((or_ln_reg_792 == 4'd8) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_8_dout;
        end else if (((or_ln_reg_792 == 4'd7) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_7_dout;
        end else if (((or_ln_reg_792 == 4'd6) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_6_dout;
        end else if (((or_ln_reg_792 == 4'd5) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_5_dout;
        end else if (((or_ln_reg_792 == 4'd4) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_4_dout;
        end else if (((or_ln_reg_792 == 4'd3) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_3_dout;
        end else if (((or_ln_reg_792 == 4'd2) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_2_dout;
        end else if (((or_ln_reg_792 == 4'd1) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_1_dout;
        end else if (((or_ln_reg_792 == 4'd0) & (icmp_ln734_reg_788 == 1'd0))) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= MM_OUT_0_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_empty_reg_322 <= ap_phi_reg_pp0_iter2_empty_reg_322;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_178 <= 32'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_178 <= select_ln734_1_fu_478_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten19_fu_166 <= 6'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten19_fu_166 <= select_ln740_2_fu_662_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten32_fu_174 <= 33'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten32_fu_174 <= select_ln737_2_fu_676_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten54_fu_182 <= 64'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten54_fu_182 <= add_ln734_fu_417_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_170 <= 28'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_170 <= select_ln737_1_fu_531_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            s_fu_158 <= 3'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            s_fu_158 <= add_ln742_fu_650_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_162 <= 3'd0;
        end else if (((icmp_ln734_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            y_fu_162 <= select_ln740_1_fu_565_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUTPUT_BUS_addr_reg_796 <= sext_ln744_fu_640_p1;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bound24_cast_reg_783[31 : 0] <= bound24_cast_fu_364_p1[31 : 0];
        icmp_ln734_reg_788 <= icmp_ln734_fu_412_p2;
        or_ln_reg_792 <= or_ln_fu_589_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_empty_reg_322 <= ap_phi_reg_pp0_iter0_empty_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_empty_reg_322 <= ap_phi_reg_pp0_iter1_empty_reg_322;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op137_read_state3 == 1'b1))) begin
        MM_OUT_0_blk_n = MM_OUT_0_empty_n;
    end else begin
        MM_OUT_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op137_read_state3 == 1'b1))) begin
        MM_OUT_0_read = 1'b1;
    end else begin
        MM_OUT_0_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op117_read_state3 == 1'b1))) begin
        MM_OUT_10_blk_n = MM_OUT_10_empty_n;
    end else begin
        MM_OUT_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op117_read_state3 == 1'b1))) begin
        MM_OUT_10_read = 1'b1;
    end else begin
        MM_OUT_10_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op115_read_state3 == 1'b1))) begin
        MM_OUT_11_blk_n = MM_OUT_11_empty_n;
    end else begin
        MM_OUT_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op115_read_state3 == 1'b1))) begin
        MM_OUT_11_read = 1'b1;
    end else begin
        MM_OUT_11_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_12_blk_n = MM_OUT_12_empty_n;
    end else begin
        MM_OUT_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_12_read = 1'b1;
    end else begin
        MM_OUT_12_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op111_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_13_blk_n = MM_OUT_13_empty_n;
    end else begin
        MM_OUT_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op111_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_13_read = 1'b1;
    end else begin
        MM_OUT_13_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op109_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_14_blk_n = MM_OUT_14_empty_n;
    end else begin
        MM_OUT_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op109_read_state3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_14_read = 1'b1;
    end else begin
        MM_OUT_14_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op139_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_15_blk_n = MM_OUT_15_empty_n;
    end else begin
        MM_OUT_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op139_read_state3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MM_OUT_15_read = 1'b1;
    end else begin
        MM_OUT_15_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op135_read_state3 == 1'b1))) begin
        MM_OUT_1_blk_n = MM_OUT_1_empty_n;
    end else begin
        MM_OUT_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op135_read_state3 == 1'b1))) begin
        MM_OUT_1_read = 1'b1;
    end else begin
        MM_OUT_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op133_read_state3 == 1'b1))) begin
        MM_OUT_2_blk_n = MM_OUT_2_empty_n;
    end else begin
        MM_OUT_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op133_read_state3 == 1'b1))) begin
        MM_OUT_2_read = 1'b1;
    end else begin
        MM_OUT_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op131_read_state3 == 1'b1))) begin
        MM_OUT_3_blk_n = MM_OUT_3_empty_n;
    end else begin
        MM_OUT_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op131_read_state3 == 1'b1))) begin
        MM_OUT_3_read = 1'b1;
    end else begin
        MM_OUT_3_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op129_read_state3 == 1'b1))) begin
        MM_OUT_4_blk_n = MM_OUT_4_empty_n;
    end else begin
        MM_OUT_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op129_read_state3 == 1'b1))) begin
        MM_OUT_4_read = 1'b1;
    end else begin
        MM_OUT_4_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op127_read_state3 == 1'b1))) begin
        MM_OUT_5_blk_n = MM_OUT_5_empty_n;
    end else begin
        MM_OUT_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op127_read_state3 == 1'b1))) begin
        MM_OUT_5_read = 1'b1;
    end else begin
        MM_OUT_5_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op125_read_state3 == 1'b1))) begin
        MM_OUT_6_blk_n = MM_OUT_6_empty_n;
    end else begin
        MM_OUT_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op125_read_state3 == 1'b1))) begin
        MM_OUT_6_read = 1'b1;
    end else begin
        MM_OUT_6_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op123_read_state3 == 1'b1))) begin
        MM_OUT_7_blk_n = MM_OUT_7_empty_n;
    end else begin
        MM_OUT_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op123_read_state3 == 1'b1))) begin
        MM_OUT_7_read = 1'b1;
    end else begin
        MM_OUT_7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op121_read_state3 == 1'b1))) begin
        MM_OUT_8_blk_n = MM_OUT_8_empty_n;
    end else begin
        MM_OUT_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op121_read_state3 == 1'b1))) begin
        MM_OUT_8_read = 1'b1;
    end else begin
        MM_OUT_8_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op119_read_state3 == 1'b1))) begin
        MM_OUT_9_blk_n = MM_OUT_9_empty_n;
    end else begin
        MM_OUT_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op119_read_state3 == 1'b1))) begin
        MM_OUT_9_read = 1'b1;
    end else begin
        MM_OUT_9_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        OUTPUT_BUS_blk_n_AW = m_axi_OUTPUT_BUS_AWREADY;
    end else begin
        OUTPUT_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        OUTPUT_BUS_blk_n_B = m_axi_OUTPUT_BUS_BVALID;
    end else begin
        OUTPUT_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OUTPUT_BUS_blk_n_W = m_axi_OUTPUT_BUS_WREADY;
    end else begin
        OUTPUT_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln734_fu_412_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_OUTPUT_BUS_AWVALID = 1'b1;
    end else begin
        m_axi_OUTPUT_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_OUTPUT_BUS_BREADY = 1'b1;
    end else begin
        m_axi_OUTPUT_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_OUTPUT_BUS_WVALID = 1'b1;
    end else begin
        m_axi_OUTPUT_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln734_fu_417_p2 = (indvar_flatten54_fu_182 + 64'd1);

assign add_ln737_1_fu_670_p2 = (indvar_flatten32_fu_174 + 33'd1);

assign add_ln737_fu_487_p2 = (select_ln734_fu_446_p3 + 28'd1);

assign add_ln740_1_fu_656_p2 = (indvar_flatten19_fu_166 + 6'd1);

assign add_ln740_fu_539_p2 = (select_ln737_fu_499_p3 + 3'd1);

assign add_ln742_fu_650_p2 = (select_ln740_fu_557_p3 + 3'd1);

assign add_ln744_1_fu_607_p2 = (zext_ln744_fu_603_p1 + add_ln744_fu_597_p2);

assign add_ln744_2_fu_625_p2 = (output_1 + zext_ln744_1_fu_621_p1);

assign add_ln744_fu_597_p2 = (tmp_s_fu_573_p3 + mul58_fu_360_p2);

assign and_ln734_1_fu_472_p2 = (xor_ln734_fu_454_p2 & icmp_ln740_fu_466_p2);

assign and_ln734_fu_519_p2 = (xor_ln734_fu_454_p2 & or_ln737_1_fu_513_p2);

assign and_ln737_fu_525_p2 = (icmp_ln742_fu_460_p2 & and_ln734_fu_519_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((m_axi_OUTPUT_BUS_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((m_axi_OUTPUT_BUS_AWREADY == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_block_state9_pp0_stage0_iter8)) | ((m_axi_OUTPUT_BUS_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((m_axi_OUTPUT_BUS_AWREADY == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (((ap_predicate_op113_read_state3 == 1'b1) & (1'b0 == MM_OUT_12_empty_n)) | ((ap_predicate_op111_read_state3 == 1'b1) & (1'b0 == MM_OUT_13_empty_n)) | ((ap_predicate_op109_read_state3 == 1'b1) & (1'b0 == MM_OUT_14_empty_n)) | ((1'b0 == MM_OUT_15_empty_n) & (ap_predicate_op139_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_0_empty_n) & (ap_predicate_op137_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_1_empty_n) & (ap_predicate_op135_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_2_empty_n) & (ap_predicate_op133_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_3_empty_n) & (ap_predicate_op131_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_4_empty_n) & (ap_predicate_op129_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_5_empty_n) & (ap_predicate_op127_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_6_empty_n) & (ap_predicate_op125_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_7_empty_n) & (ap_predicate_op123_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_8_empty_n) & (ap_predicate_op121_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_9_empty_n) & (ap_predicate_op119_read_state3 
    == 1'b1)) | ((1'b0 == MM_OUT_10_empty_n) & (ap_predicate_op117_read_state3 == 1'b1)) | ((1'b0 == MM_OUT_11_empty_n) & (ap_predicate_op115_read_state3 == 1'b1)));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter8 = (m_axi_OUTPUT_BUS_BVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign ap_phi_reg_pp0_iter0_empty_reg_322 = 'bx;

always @ (*) begin
    ap_predicate_op109_read_state3 = ((or_ln_reg_792 == 4'd14) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op111_read_state3 = ((or_ln_reg_792 == 4'd13) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op113_read_state3 = ((or_ln_reg_792 == 4'd12) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op115_read_state3 = ((or_ln_reg_792 == 4'd11) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op117_read_state3 = ((or_ln_reg_792 == 4'd10) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op119_read_state3 = ((or_ln_reg_792 == 4'd9) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op121_read_state3 = ((or_ln_reg_792 == 4'd8) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op123_read_state3 = ((or_ln_reg_792 == 4'd7) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op125_read_state3 = ((or_ln_reg_792 == 4'd6) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op127_read_state3 = ((or_ln_reg_792 == 4'd5) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op129_read_state3 = ((or_ln_reg_792 == 4'd4) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op131_read_state3 = ((or_ln_reg_792 == 4'd3) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op133_read_state3 = ((or_ln_reg_792 == 4'd2) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op135_read_state3 = ((or_ln_reg_792 == 4'd1) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op137_read_state3 = ((or_ln_reg_792 == 4'd0) & (icmp_ln734_reg_788 == 1'd0));
end

always @ (*) begin
    ap_predicate_op139_read_state3 = ((or_ln_reg_792 == 4'd15) & (icmp_ln734_reg_788 == 1'd0));
end

assign bound24_cast_fu_364_p1 = bound24;

assign empty_999_fu_581_p1 = select_ln740_1_fu_565_p3[1:0];

assign i_2_fu_435_p2 = (i_fu_178 + 32'd1);

assign icmp_ln734_fu_412_p2 = ((indvar_flatten54_fu_182 == bound37) ? 1'b1 : 1'b0);

assign icmp_ln737_fu_441_p2 = ((indvar_flatten32_fu_174 == bound24_cast_reg_783) ? 1'b1 : 1'b0);

assign icmp_ln740_fu_466_p2 = ((indvar_flatten19_fu_166 == 6'd16) ? 1'b1 : 1'b0);

assign icmp_ln742_fu_460_p2 = ((s_fu_158 == 3'd4) ? 1'b1 : 1'b0);

assign m_axi_OUTPUT_BUS_ARADDR = 64'd0;

assign m_axi_OUTPUT_BUS_ARBURST = 2'd0;

assign m_axi_OUTPUT_BUS_ARCACHE = 4'd0;

assign m_axi_OUTPUT_BUS_ARID = 1'd0;

assign m_axi_OUTPUT_BUS_ARLEN = 32'd0;

assign m_axi_OUTPUT_BUS_ARLOCK = 2'd0;

assign m_axi_OUTPUT_BUS_ARPROT = 3'd0;

assign m_axi_OUTPUT_BUS_ARQOS = 4'd0;

assign m_axi_OUTPUT_BUS_ARREGION = 4'd0;

assign m_axi_OUTPUT_BUS_ARSIZE = 3'd0;

assign m_axi_OUTPUT_BUS_ARUSER = 1'd0;

assign m_axi_OUTPUT_BUS_ARVALID = 1'b0;

assign m_axi_OUTPUT_BUS_AWADDR = OUTPUT_BUS_addr_reg_796;

assign m_axi_OUTPUT_BUS_AWBURST = 2'd0;

assign m_axi_OUTPUT_BUS_AWCACHE = 4'd0;

assign m_axi_OUTPUT_BUS_AWID = 1'd0;

assign m_axi_OUTPUT_BUS_AWLEN = 32'd1;

assign m_axi_OUTPUT_BUS_AWLOCK = 2'd0;

assign m_axi_OUTPUT_BUS_AWPROT = 3'd0;

assign m_axi_OUTPUT_BUS_AWQOS = 4'd0;

assign m_axi_OUTPUT_BUS_AWREGION = 4'd0;

assign m_axi_OUTPUT_BUS_AWSIZE = 3'd0;

assign m_axi_OUTPUT_BUS_AWUSER = 1'd0;

assign m_axi_OUTPUT_BUS_RREADY = 1'b0;

assign m_axi_OUTPUT_BUS_WDATA = ap_phi_reg_pp0_iter3_empty_reg_322;

assign m_axi_OUTPUT_BUS_WID = 1'd0;

assign m_axi_OUTPUT_BUS_WLAST = 1'b0;

assign m_axi_OUTPUT_BUS_WSTRB = 4'd15;

assign m_axi_OUTPUT_BUS_WUSER = 1'd0;

assign mul58_fu_360_p1 = ((icmp_ln737_fu_441_p2[0:0] == 1'b1) ? i_2_fu_435_p2 : i_fu_178);

assign or_ln737_1_fu_513_p2 = (xor_ln737_fu_507_p2 | icmp_ln737_fu_441_p2);

assign or_ln737_fu_493_p2 = (icmp_ln737_fu_441_p2 | and_ln734_1_fu_472_p2);

assign or_ln740_1_fu_551_p2 = (or_ln740_fu_545_p2 | icmp_ln737_fu_441_p2);

assign or_ln740_fu_545_p2 = (and_ln737_fu_525_p2 | and_ln734_1_fu_472_p2);

assign or_ln_fu_589_p3 = {{trunc_ln744_fu_585_p1}, {empty_999_fu_581_p1}};

assign select_ln734_1_fu_478_p3 = ((icmp_ln737_fu_441_p2[0:0] == 1'b1) ? i_2_fu_435_p2 : i_fu_178);

assign select_ln734_fu_446_p3 = ((icmp_ln737_fu_441_p2[0:0] == 1'b1) ? 28'd0 : j_fu_170);

assign select_ln737_1_fu_531_p3 = ((and_ln734_1_fu_472_p2[0:0] == 1'b1) ? add_ln737_fu_487_p2 : select_ln734_fu_446_p3);

assign select_ln737_2_fu_676_p3 = ((icmp_ln737_fu_441_p2[0:0] == 1'b1) ? 33'd1 : add_ln737_1_fu_670_p2);

assign select_ln737_fu_499_p3 = ((or_ln737_fu_493_p2[0:0] == 1'b1) ? 3'd0 : y_fu_162);

assign select_ln740_1_fu_565_p3 = ((and_ln737_fu_525_p2[0:0] == 1'b1) ? add_ln740_fu_539_p2 : select_ln737_fu_499_p3);

assign select_ln740_2_fu_662_p3 = ((or_ln737_fu_493_p2[0:0] == 1'b1) ? 6'd1 : add_ln740_1_fu_656_p2);

assign select_ln740_fu_557_p3 = ((or_ln740_1_fu_551_p2[0:0] == 1'b1) ? 3'd0 : s_fu_158);

assign sext_ln744_fu_640_p1 = $signed(trunc_ln5_fu_630_p4);

assign shl_ln1_fu_613_p3 = {{add_ln744_1_fu_607_p2}, {2'd0}};

assign tmp_s_fu_573_p3 = {{select_ln737_1_fu_531_p3}, {4'd0}};

assign trunc_ln5_fu_630_p4 = {{add_ln744_2_fu_625_p2[63:2]}};

assign trunc_ln744_fu_585_p1 = select_ln740_fu_557_p3[1:0];

assign xor_ln734_fu_454_p2 = (icmp_ln737_fu_441_p2 ^ 1'd1);

assign xor_ln737_fu_507_p2 = (icmp_ln740_fu_466_p2 ^ 1'd1);

assign zext_ln744_1_fu_621_p1 = shl_ln1_fu_613_p3;

assign zext_ln744_fu_603_p1 = or_ln_fu_589_p3;

always @ (posedge ap_clk) begin
    bound24_cast_reg_783[32] <= 1'b0;
end

endmodule //top_ResOutput_Pipeline_VITIS_LOOP_734_4_VITIS_LOOP_737_5_VITIS_LOOP_740_6_VITIS_LOOP
