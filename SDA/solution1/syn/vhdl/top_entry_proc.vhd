-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_entry_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    Output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    Output_r_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    Output_r_c_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    Output_r_c_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    Output_r_c_full_n : IN STD_LOGIC;
    Output_r_c_write : OUT STD_LOGIC;
    K : IN STD_LOGIC_VECTOR (31 downto 0);
    K_c58_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    K_c58_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    K_c58_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    K_c58_full_n : IN STD_LOGIC;
    K_c58_write : OUT STD_LOGIC;
    P : IN STD_LOGIC_VECTOR (31 downto 0);
    P_c60_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_c60_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    P_c60_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    P_c60_full_n : IN STD_LOGIC;
    P_c60_write : OUT STD_LOGIC;
    S : IN STD_LOGIC_VECTOR (31 downto 0);
    S_c61_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_c61_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    S_c61_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    S_c61_full_n : IN STD_LOGIC;
    S_c61_write : OUT STD_LOGIC );
end;


architecture behav of top_entry_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal Output_r_c_blk_n : STD_LOGIC;
    signal K_c58_blk_n : STD_LOGIC;
    signal P_c60_blk_n : STD_LOGIC;
    signal S_c61_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    K_c58_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, K_c58_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            K_c58_blk_n <= K_c58_full_n;
        else 
            K_c58_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    K_c58_din <= K;

    K_c58_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            K_c58_write <= ap_const_logic_1;
        else 
            K_c58_write <= ap_const_logic_0;
        end if; 
    end process;


    Output_r_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, Output_r_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output_r_c_blk_n <= Output_r_c_full_n;
        else 
            Output_r_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Output_r_c_din <= Output_r;

    Output_r_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Output_r_c_write <= ap_const_logic_1;
        else 
            Output_r_c_write <= ap_const_logic_0;
        end if; 
    end process;


    P_c60_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, P_c60_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_c60_blk_n <= P_c60_full_n;
        else 
            P_c60_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    P_c60_din <= P;

    P_c60_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_c60_write <= ap_const_logic_1;
        else 
            P_c60_write <= ap_const_logic_0;
        end if; 
    end process;


    S_c61_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, S_c61_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_c61_blk_n <= S_c61_full_n;
        else 
            S_c61_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_c61_din <= S;

    S_c61_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_c61_write <= ap_const_logic_1;
        else 
            S_c61_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, Output_r_c_full_n, K_c58_full_n, P_c60_full_n, S_c61_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_const_logic_0 = S_c61_full_n) or (ap_const_logic_0 = P_c60_full_n) or (ap_const_logic_0 = K_c58_full_n) or (ap_const_logic_0 = Output_r_c_full_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
