-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_Sliding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv3_samepad_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    conv3_samepad_empty_n : IN STD_LOGIC;
    conv3_samepad_read : OUT STD_LOGIC;
    conv3_sild_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    conv3_sild_full_n : IN STD_LOGIC;
    conv3_sild_write : OUT STD_LOGIC;
    R : IN STD_LOGIC_VECTOR (31 downto 0);
    C : IN STD_LOGIC_VECTOR (31 downto 0);
    N : IN STD_LOGIC_VECTOR (31 downto 0);
    M : IN STD_LOGIC_VECTOR (31 downto 0);
    mode : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of top_Sliding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mode_read_read_fu_46_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cycles_write_block_fu_100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln87_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal cycles_read_block_reg_282 : STD_LOGIC_VECTOR (27 downto 0);
    signal div17_cast_reg_288 : STD_LOGIC_VECTOR (27 downto 0);
    signal max_cycles_fu_176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_cycles_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal lshr_ln2_reg_298 : STD_LOGIC_VECTOR (27 downto 0);
    signal baseIter_fu_199_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal baseIter_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln84_fu_96_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln84_reg_309 : STD_LOGIC_VECTOR (59 downto 0);
    signal div_reg_314 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal div30_cast_reg_319 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal add80_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add80_reg_329 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_idle : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_ready : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal mul_ln84_fu_96_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln84_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_fu_100_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_105_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln89_fu_189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln89_1_fu_110_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln86_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln86_fu_124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_fu_130_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln86_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_136_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln87_fu_151_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln87_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln88_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln89_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln89_1_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal div30_cast_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add80_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal cycles_write_block_fu_100_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln84_fu_96_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln84_fu_96_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv3_samepad_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        conv3_samepad_empty_n : IN STD_LOGIC;
        conv3_samepad_read : OUT STD_LOGIC;
        conv3_sild_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        conv3_sild_full_n : IN STD_LOGIC;
        conv3_sild_write : OUT STD_LOGIC;
        mul_ln84 : IN STD_LOGIC_VECTOR (59 downto 0);
        sub : IN STD_LOGIC_VECTOR (31 downto 0);
        div30_cast : IN STD_LOGIC_VECTOR (12 downto 0);
        empty : IN STD_LOGIC_VECTOR (27 downto 0);
        baseIter : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln89 : IN STD_LOGIC_VECTOR (27 downto 0);
        add_ln87 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_cycles : IN STD_LOGIC_VECTOR (31 downto 0);
        cycles_read_block_1 : IN STD_LOGIC_VECTOR (27 downto 0);
        add80 : IN STD_LOGIC_VECTOR (31 downto 0);
        cycles_write_block : IN STD_LOGIC_VECTOR (31 downto 0);
        C : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_28ns_32ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component top_mul_28ns_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76 : component top_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start,
        ap_done => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done,
        ap_idle => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_idle,
        ap_ready => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_ready,
        conv3_samepad_dout => conv3_samepad_dout,
        conv3_samepad_empty_n => conv3_samepad_empty_n,
        conv3_samepad_read => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read,
        conv3_sild_din => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_din,
        conv3_sild_full_n => conv3_sild_full_n,
        conv3_sild_write => grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write,
        mul_ln84 => mul_ln84_reg_309,
        sub => sub_reg_324,
        div30_cast => div30_cast_reg_319,
        empty => div_reg_314,
        baseIter => baseIter_reg_303,
        zext_ln89 => lshr_ln2_reg_298,
        add_ln87 => add_ln87_reg_275,
        max_cycles => max_cycles_reg_293,
        cycles_read_block_1 => cycles_read_block_reg_282,
        add80 => add80_reg_329,
        cycles_write_block => cycles_write_block_reg_268,
        C => C);

    mul_28ns_32ns_60_1_1_U51 : component top_mul_28ns_32ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 60)
    port map (
        din0 => mul_ln84_fu_96_p0,
        din1 => mul_ln84_fu_96_p1,
        dout => mul_ln84_fu_96_p2);

    mul_28ns_32s_32_1_1_U52 : component top_mul_28ns_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => cycles_write_block_fu_100_p0,
        din1 => C,
        dout => cycles_write_block_fu_100_p2);

    mul_32s_32s_32_1_1_U53 : component top_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_105_p0,
        din1 => N,
        dout => grp_fu_105_p2);

    mul_32s_32s_32_1_1_U54 : component top_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln89_1_fu_110_p0,
        din1 => R,
        dout => mul_ln89_1_fu_110_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add80_reg_329 <= add80_fu_240_p2;
                div30_cast_reg_319 <= div30_cast_fu_224_p1(16 downto 4);
                div_reg_314 <= div_fu_214_p1(31 downto 4);
                sub_reg_324 <= sub_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln87_reg_275 <= add_ln87_fu_151_p2;
                cycles_read_block_reg_282 <= grp_fu_105_p2(31 downto 4);
                cycles_write_block_reg_268 <= cycles_write_block_fu_100_p2;
                div17_cast_reg_288 <= M(31 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                baseIter_reg_303 <= baseIter_fu_199_p2;
                lshr_ln2_reg_298 <= grp_fu_105_p2(31 downto 4);
                max_cycles_reg_293 <= max_cycles_fu_176_p3;
                mul_ln84_reg_309 <= mul_ln84_fu_96_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, mode, mode_read_read_fu_46_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (mode_read_read_fu_46_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add80_fu_240_p0 <= R;
    add80_fu_240_p2 <= std_logic_vector(signed(add80_fu_240_p0) + signed(ap_const_lv32_2));
    add_ln86_fu_130_p1 <= N;
    add_ln86_fu_130_p2 <= std_logic_vector(unsigned(shl_ln86_fu_124_p2) + unsigned(add_ln86_fu_130_p1));
    add_ln87_fu_151_p0 <= C;
    add_ln87_fu_151_p2 <= std_logic_vector(signed(add_ln87_fu_151_p0) + signed(ap_const_lv32_2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(mode, grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done = ap_const_logic_0) and (mode = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    baseIter_fu_199_p2 <= std_logic_vector(unsigned(mul_ln89_1_fu_110_p2) + unsigned(zext_ln89_fu_195_p1));

    conv3_samepad_read_assign_proc : process(mode, grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read, ap_CS_fsm_state4)
    begin
        if (((mode = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            conv3_samepad_read <= grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read;
        else 
            conv3_samepad_read <= ap_const_logic_0;
        end if; 
    end process;

    conv3_sild_din <= grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_din;

    conv3_sild_write_assign_proc : process(mode, grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write, ap_CS_fsm_state4)
    begin
        if (((mode = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            conv3_sild_write <= grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write;
        else 
            conv3_sild_write <= ap_const_logic_0;
        end if; 
    end process;

    cycles_write_block_fu_100_p0 <= cycles_write_block_fu_100_p00(28 - 1 downto 0);
    cycles_write_block_fu_100_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_136_p4),32));
    div30_cast_fu_224_p1 <= N;
    div_fu_214_p1 <= N;
    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start <= grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg;

    grp_fu_105_p0_assign_proc : process(ap_CS_fsm_state1, add_ln87_fu_151_p2, ap_CS_fsm_state2, sub_ln89_fu_189_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_105_p0 <= sub_ln89_fu_189_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_105_p0 <= add_ln87_fu_151_p2;
        else 
            grp_fu_105_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_114_p4 <= grp_fu_105_p2(31 downto 4);
    icmp_ln88_fu_171_p2 <= "1" when (unsigned(cycles_write_block_reg_268) > unsigned(zext_ln87_fu_168_p1)) else "0";
    lshr_ln_fu_136_p4 <= add_ln86_fu_130_p2(31 downto 4);
    max_cycles_fu_176_p3 <= 
        cycles_write_block_reg_268 when (icmp_ln88_fu_171_p2(0) = '1') else 
        zext_ln87_fu_168_p1;
    mode_read_read_fu_46_p2 <= mode;
    mul_ln84_fu_96_p0 <= mul_ln84_fu_96_p00(28 - 1 downto 0);
    mul_ln84_fu_96_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div17_cast_reg_288),60));
    mul_ln84_fu_96_p1 <= mul_ln84_fu_96_p10(32 - 1 downto 0);
    mul_ln84_fu_96_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(baseIter_fu_199_p2),60));
    mul_ln89_1_fu_110_p0 <= 
        cycles_write_block_reg_268 when (icmp_ln88_fu_171_p2(0) = '1') else 
        zext_ln87_fu_168_p1;
    shl_ln86_fu_124_p0 <= N;
    shl_ln86_fu_124_p2 <= std_logic_vector(shift_left(unsigned(shl_ln86_fu_124_p0),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    shl_ln89_fu_184_p2 <= std_logic_vector(shift_left(unsigned(add_ln87_reg_275),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    sub_fu_234_p2 <= std_logic_vector(unsigned(baseIter_reg_303) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln89_fu_189_p2 <= std_logic_vector(unsigned(shl_ln89_fu_184_p2) - unsigned(add_ln87_reg_275));
    zext_ln87_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cycles_read_block_reg_282),32));
    zext_ln89_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_114_p4),32));
end behav;
