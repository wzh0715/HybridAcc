-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_Sliding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    conv3_samepad_dout : IN STD_LOGIC_VECTOR (511 downto 0);
    conv3_samepad_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    conv3_samepad_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    conv3_samepad_empty_n : IN STD_LOGIC;
    conv3_samepad_read : OUT STD_LOGIC;
    conv3_sild_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    conv3_sild_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    conv3_sild_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    conv3_sild_full_n : IN STD_LOGIC;
    conv3_sild_write : OUT STD_LOGIC;
    R_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    R_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    R_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    R_empty_n : IN STD_LOGIC;
    R_read : OUT STD_LOGIC;
    C_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    C_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    C_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    C_empty_n : IN STD_LOGIC;
    C_read : OUT STD_LOGIC;
    N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    N_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    N_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    N_empty_n : IN STD_LOGIC;
    N_read : OUT STD_LOGIC;
    M_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    M_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    M_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    M_empty_n : IN STD_LOGIC;
    M_read : OUT STD_LOGIC;
    K_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    K_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    K_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    K_empty_n : IN STD_LOGIC;
    K_read : OUT STD_LOGIC;
    P_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    P_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    P_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    P_empty_n : IN STD_LOGIC;
    P_read : OUT STD_LOGIC;
    S_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    S_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    S_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    S_empty_n : IN STD_LOGIC;
    S_read : OUT STD_LOGIC;
    mode_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    mode_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_empty_n : IN STD_LOGIC;
    mode_read : OUT STD_LOGIC;
    R_c44_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    R_c44_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    R_c44_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    R_c44_full_n : IN STD_LOGIC;
    R_c44_write : OUT STD_LOGIC;
    C_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    C_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    C_c_full_n : IN STD_LOGIC;
    C_c_write : OUT STD_LOGIC;
    N_c49_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    N_c49_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    N_c49_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    N_c49_full_n : IN STD_LOGIC;
    N_c49_write : OUT STD_LOGIC;
    M_c54_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_c54_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    M_c54_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    M_c54_full_n : IN STD_LOGIC;
    M_c54_write : OUT STD_LOGIC;
    K_c57_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    K_c57_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    K_c57_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    K_c57_full_n : IN STD_LOGIC;
    K_c57_write : OUT STD_LOGIC;
    P_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    P_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    P_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    P_c_full_n : IN STD_LOGIC;
    P_c_write : OUT STD_LOGIC;
    S_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    S_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    S_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    S_c_full_n : IN STD_LOGIC;
    S_c_write : OUT STD_LOGIC;
    mode_c70_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    mode_c70_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_c70_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    mode_c70_full_n : IN STD_LOGIC;
    mode_c70_write : OUT STD_LOGIC );
end;


architecture behav of top_Sliding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal R_blk_n : STD_LOGIC;
    signal C_blk_n : STD_LOGIC;
    signal N_blk_n : STD_LOGIC;
    signal M_blk_n : STD_LOGIC;
    signal K_blk_n : STD_LOGIC;
    signal P_blk_n : STD_LOGIC;
    signal S_blk_n : STD_LOGIC;
    signal mode_blk_n : STD_LOGIC;
    signal R_c44_blk_n : STD_LOGIC;
    signal C_c_blk_n : STD_LOGIC;
    signal N_c49_blk_n : STD_LOGIC;
    signal M_c54_blk_n : STD_LOGIC;
    signal K_c57_blk_n : STD_LOGIC;
    signal P_c_blk_n : STD_LOGIC;
    signal S_c_blk_n : STD_LOGIC;
    signal mode_c70_blk_n : STD_LOGIC;
    signal reg_248 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal mode_1_read_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mode_1_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal S_1_reg_416 : STD_LOGIC_VECTOR (31 downto 0);
    signal K_1_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal N_1_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_253_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_reg_441 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln95_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln95_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_reg_457 : STD_LOGIC_VECTOR (31 downto 0);
    signal div29_cast_reg_467 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln95_1_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln95_1_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_read_block_fu_225_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_read_block_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal udiv_ln98_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_cycles_fu_340_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_cycles_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal baseIter_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal baseIter_reg_501 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln93_fu_217_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln93_reg_507 : STD_LOGIC_VECTOR (59 downto 0);
    signal div_reg_512 : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal div42_cast_reg_517 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub143_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub143_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal add63_fu_398_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add63_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln156_fu_403_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln156_reg_532 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln158_fu_407_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln158_reg_537 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_idle : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_ready : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_din : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write : STD_LOGIC;
    signal grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal mul_ln93_fu_217_p0 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln93_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_fu_221_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_fu_221_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal cycles_read_block_fu_225_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln98_1_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_253_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln95_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln95_fu_269_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln98_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1_fu_321_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal icmp_ln97_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln98_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_ap_start : STD_LOGIC;
    signal grp_fu_275_ap_done : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_293_ap_start : STD_LOGIC;
    signal grp_fu_293_ap_done : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal ap_block_state39_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal cycles_read_block_fu_225_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal cycles_write_block_fu_221_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln93_fu_217_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal mul_ln93_fu_217_p10 : STD_LOGIC_VECTOR (59 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv3_samepad_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        conv3_samepad_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        conv3_samepad_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        conv3_samepad_empty_n : IN STD_LOGIC;
        conv3_samepad_read : OUT STD_LOGIC;
        conv3_sild_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        conv3_sild_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        conv3_sild_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        conv3_sild_full_n : IN STD_LOGIC;
        conv3_sild_write : OUT STD_LOGIC;
        mul_ln93 : IN STD_LOGIC_VECTOR (59 downto 0);
        sub143 : IN STD_LOGIC_VECTOR (31 downto 0);
        div42_cast : IN STD_LOGIC_VECTOR (11 downto 0);
        empty_48 : IN STD_LOGIC_VECTOR (27 downto 0);
        baseIter : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln98 : IN STD_LOGIC_VECTOR (27 downto 0);
        add_ln95 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_cycles : IN STD_LOGIC_VECTOR (31 downto 0);
        cycles_read_block : IN STD_LOGIC_VECTOR (31 downto 0);
        add_ln98 : IN STD_LOGIC_VECTOR (31 downto 0);
        cycles_write_block : IN STD_LOGIC_VECTOR (31 downto 0);
        add63 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_49 : IN STD_LOGIC_VECTOR (11 downto 0);
        add_ln95_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        K_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_50 : IN STD_LOGIC_VECTOR (3 downto 0);
        empty : IN STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component top_mul_28ns_32ns_60_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (27 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component top_mul_32s_28ns_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (27 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_udiv_32ns_32s_32_36_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192 : component top_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start,
        ap_done => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done,
        ap_idle => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_idle,
        ap_ready => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_ready,
        conv3_samepad_dout => conv3_samepad_dout,
        conv3_samepad_num_data_valid => ap_const_lv4_0,
        conv3_samepad_fifo_cap => ap_const_lv4_0,
        conv3_samepad_empty_n => conv3_samepad_empty_n,
        conv3_samepad_read => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read,
        conv3_sild_din => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_din,
        conv3_sild_num_data_valid => ap_const_lv3_0,
        conv3_sild_fifo_cap => ap_const_lv3_0,
        conv3_sild_full_n => conv3_sild_full_n,
        conv3_sild_write => grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write,
        mul_ln93 => mul_ln93_reg_507,
        sub143 => sub143_reg_522,
        div42_cast => div42_cast_reg_517,
        empty_48 => div_reg_512,
        baseIter => baseIter_reg_501,
        zext_ln98 => reg_248,
        add_ln95 => add_ln95_reg_446,
        max_cycles => max_cycles_reg_496,
        cycles_read_block => cycles_read_block_reg_484,
        add_ln98 => add_ln98_reg_457,
        cycles_write_block => cycles_write_block_reg_477,
        add63 => add63_reg_527,
        empty_49 => empty_reg_441,
        add_ln95_1 => add_ln95_1_reg_472,
        K_1 => K_1_reg_425,
        empty_50 => trunc_ln156_reg_532,
        empty => trunc_ln158_reg_537);

    mul_28ns_32ns_60_1_1_U649 : component top_mul_28ns_32ns_60_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 28,
        din1_WIDTH => 32,
        dout_WIDTH => 60)
    port map (
        din0 => mul_ln93_fu_217_p0,
        din1 => mul_ln93_fu_217_p1,
        dout => mul_ln93_fu_217_p2);

    mul_32s_28ns_32_1_1_U650 : component top_mul_32s_28ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 28,
        dout_WIDTH => 32)
    port map (
        din0 => cycles_write_block_fu_221_p0,
        din1 => cycles_write_block_fu_221_p1,
        dout => cycles_write_block_fu_221_p2);

    mul_32s_28ns_32_1_1_U651 : component top_mul_32s_28ns_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 28,
        dout_WIDTH => 32)
    port map (
        din0 => S_1_reg_416,
        din1 => cycles_read_block_fu_225_p1,
        dout => cycles_read_block_fu_225_p2);

    mul_32s_32s_32_1_1_U652 : component top_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_229_p0,
        din1 => grp_fu_229_p1,
        dout => grp_fu_229_p2);

    mul_32s_32s_32_1_1_U653 : component top_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_233_p0,
        din1 => grp_fu_233_p1,
        dout => grp_fu_233_p2);

    udiv_32ns_32s_32_36_seq_1_U654 : component top_udiv_32ns_32s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_275_ap_start,
        done => grp_fu_275_ap_done,
        din0 => grp_fu_275_p0,
        din1 => S_dout,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    udiv_32ns_32s_32_36_seq_1_U655 : component top_udiv_32ns_32s_32_36_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_293_ap_start,
        done => grp_fu_293_ap_done,
        din0 => grp_fu_293_p0,
        din1 => S_dout,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_ready = ap_const_logic_1)) then 
                    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                K_1_reg_425 <= K_dout;
                N_1_reg_433 <= N_dout;
                S_1_reg_416 <= S_dout;
                add_ln95_reg_446 <= add_ln95_fu_263_p2;
                add_ln98_reg_457 <= add_ln98_fu_281_p2;
                div29_cast_reg_467 <= M_dout(31 downto 4);
                empty_reg_441 <= empty_fu_253_p1;
                mode_1_reg_412 <= mode_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                add63_reg_527 <= add63_fu_398_p2;
                div42_cast_reg_517 <= N_1_reg_433(15 downto 4);
                div_reg_512 <= N_1_reg_433(31 downto 4);
                sub143_reg_522 <= sub143_fu_392_p2;
                trunc_ln156_reg_532 <= trunc_ln156_fu_403_p1;
                trunc_ln158_reg_537 <= trunc_ln158_fu_407_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                add_ln95_1_reg_472 <= add_ln95_1_fu_314_p2;
                cycles_read_block_reg_484 <= cycles_read_block_fu_225_p2;
                cycles_write_block_reg_477 <= cycles_write_block_fu_221_p2;
                udiv_ln98_reg_491 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                baseIter_reg_501 <= baseIter_fu_357_p2;
                max_cycles_reg_496 <= max_cycles_fu_340_p3;
                mul_ln93_reg_507 <= mul_ln93_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then
                reg_248 <= grp_fu_229_p2(31 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, mode_1_read_fu_80_p2, ap_block_state1, ap_CS_fsm_state39, ap_block_state39_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (mode_1_read_fu_80_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                elsif (((ap_const_boolean_0 = ap_block_state1) and (mode_1_read_fu_80_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    C_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, C_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_blk_n <= C_empty_n;
        else 
            C_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    C_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, C_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_c_blk_n <= C_c_full_n;
        else 
            C_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_c_din <= C_dout;

    C_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_c_write <= ap_const_logic_1;
        else 
            C_c_write <= ap_const_logic_0;
        end if; 
    end process;


    C_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            C_read <= ap_const_logic_1;
        else 
            C_read <= ap_const_logic_0;
        end if; 
    end process;


    K_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, K_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            K_blk_n <= K_empty_n;
        else 
            K_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    K_c57_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, K_c57_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            K_c57_blk_n <= K_c57_full_n;
        else 
            K_c57_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    K_c57_din <= K_dout;

    K_c57_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            K_c57_write <= ap_const_logic_1;
        else 
            K_c57_write <= ap_const_logic_0;
        end if; 
    end process;


    K_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            K_read <= ap_const_logic_1;
        else 
            K_read <= ap_const_logic_0;
        end if; 
    end process;


    M_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, M_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            M_blk_n <= M_empty_n;
        else 
            M_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    M_c54_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, M_c54_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            M_c54_blk_n <= M_c54_full_n;
        else 
            M_c54_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_c54_din <= M_dout;

    M_c54_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            M_c54_write <= ap_const_logic_1;
        else 
            M_c54_write <= ap_const_logic_0;
        end if; 
    end process;


    M_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            M_read <= ap_const_logic_1;
        else 
            M_read <= ap_const_logic_0;
        end if; 
    end process;


    N_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, N_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_blk_n <= N_empty_n;
        else 
            N_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_c49_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, N_c49_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_c49_blk_n <= N_c49_full_n;
        else 
            N_c49_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    N_c49_din <= N_dout;

    N_c49_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_c49_write <= ap_const_logic_1;
        else 
            N_c49_write <= ap_const_logic_0;
        end if; 
    end process;


    N_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_read <= ap_const_logic_1;
        else 
            N_read <= ap_const_logic_0;
        end if; 
    end process;


    P_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, P_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_blk_n <= P_empty_n;
        else 
            P_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    P_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, P_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_c_blk_n <= P_c_full_n;
        else 
            P_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    P_c_din <= P_dout;

    P_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_c_write <= ap_const_logic_1;
        else 
            P_c_write <= ap_const_logic_0;
        end if; 
    end process;


    P_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            P_read <= ap_const_logic_1;
        else 
            P_read <= ap_const_logic_0;
        end if; 
    end process;


    R_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, R_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_blk_n <= R_empty_n;
        else 
            R_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    R_c44_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, R_c44_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_c44_blk_n <= R_c44_full_n;
        else 
            R_c44_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    R_c44_din <= R_dout;

    R_c44_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_c44_write <= ap_const_logic_1;
        else 
            R_c44_write <= ap_const_logic_0;
        end if; 
    end process;


    R_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            R_read <= ap_const_logic_1;
        else 
            R_read <= ap_const_logic_0;
        end if; 
    end process;


    S_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, S_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_blk_n <= S_empty_n;
        else 
            S_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, S_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_c_blk_n <= S_c_full_n;
        else 
            S_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    S_c_din <= S_dout;

    S_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_c_write <= ap_const_logic_1;
        else 
            S_c_write <= ap_const_logic_0;
        end if; 
    end process;


    S_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            S_read <= ap_const_logic_1;
        else 
            S_read <= ap_const_logic_0;
        end if; 
    end process;

    add63_fu_398_p2 <= std_logic_vector(signed(S_1_reg_416) + signed(K_1_reg_425));
    add_ln95_1_fu_314_p2 <= std_logic_vector(unsigned(grp_fu_275_p2) + unsigned(ap_const_lv32_1));
    add_ln95_fu_263_p2 <= std_logic_vector(unsigned(C_dout) + unsigned(shl_ln95_fu_257_p2));
    add_ln98_1_fu_351_p2 <= std_logic_vector(unsigned(udiv_ln98_reg_491) + unsigned(ap_const_lv32_1));
    add_ln98_fu_281_p2 <= std_logic_vector(unsigned(R_dout) + unsigned(shl_ln95_fu_257_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(ap_block_state39_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state39_on_subcall_done)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, R_empty_n, C_empty_n, N_empty_n, M_empty_n, K_empty_n, P_empty_n, S_empty_n, mode_empty_n, R_c44_full_n, C_c_full_n, N_c49_full_n, M_c54_full_n, K_c57_full_n, P_c_full_n, S_c_full_n, mode_c70_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0) or (ap_const_logic_0 = C_empty_n) or (ap_const_logic_0 = R_empty_n) or (ap_const_logic_0 = S_c_full_n) or (ap_const_logic_0 = P_c_full_n) or (ap_const_logic_0 = K_c57_full_n) or (ap_const_logic_0 = M_c54_full_n) or (ap_const_logic_0 = N_c49_full_n) or (ap_const_logic_0 = C_c_full_n) or (ap_const_logic_0 = R_c44_full_n) or (ap_const_logic_0 = S_empty_n) or (ap_const_logic_0 = P_empty_n) or (ap_const_logic_0 = K_empty_n) or (ap_const_logic_0 = M_empty_n) or (ap_const_logic_0 = N_empty_n) or (mode_c70_full_n = ap_const_logic_0) or (mode_empty_n = ap_const_logic_0));
    end process;


    ap_block_state39_on_subcall_done_assign_proc : process(mode_1_reg_412, grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done)
    begin
                ap_block_state39_on_subcall_done <= ((grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_done = ap_const_logic_0) and (mode_1_reg_412 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state39, ap_block_state39_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    baseIter_fu_357_p2 <= std_logic_vector(unsigned(grp_fu_229_p2) + unsigned(zext_ln98_fu_347_p1));

    conv3_samepad_read_assign_proc : process(mode_1_reg_412, grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read, ap_CS_fsm_state39)
    begin
        if (((mode_1_reg_412 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            conv3_samepad_read <= grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_samepad_read;
        else 
            conv3_samepad_read <= ap_const_logic_0;
        end if; 
    end process;

    conv3_sild_din <= grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_din;

    conv3_sild_write_assign_proc : process(mode_1_reg_412, grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write, ap_CS_fsm_state39)
    begin
        if (((mode_1_reg_412 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            conv3_sild_write <= grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_conv3_sild_write;
        else 
            conv3_sild_write <= ap_const_logic_0;
        end if; 
    end process;

    cycles_read_block_fu_225_p1 <= cycles_read_block_fu_225_p10(28 - 1 downto 0);
    cycles_read_block_fu_225_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_321_p4),32));
    cycles_write_block_fu_221_p0 <= std_logic_vector(unsigned(grp_fu_275_p2) + unsigned(ap_const_lv32_1));
    cycles_write_block_fu_221_p1 <= cycles_write_block_fu_221_p10(28 - 1 downto 0);
    cycles_write_block_fu_221_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_248),32));
    empty_fu_253_p0 <= S_dout;
    empty_fu_253_p1 <= empty_fu_253_p0(12 - 1 downto 0);
    grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start <= grp_Sliding_Pipeline_VITIS_LOOP_114_1_VITIS_LOOP_117_2_fu_192_ap_start_reg;

    grp_fu_229_p0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, max_cycles_fu_340_p3, ap_CS_fsm_state37, grp_fu_233_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_229_p0 <= max_cycles_fu_340_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_229_p0 <= grp_fu_233_p2;
        else 
            grp_fu_229_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_229_p1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, K_1_reg_425, ap_CS_fsm_state37, add_ln98_1_fu_351_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            grp_fu_229_p1 <= add_ln98_1_fu_351_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_229_p1 <= K_1_reg_425;
        else 
            grp_fu_229_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p0_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, K_1_reg_425, N_1_reg_433)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_233_p0 <= N_1_reg_433;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_233_p0 <= K_1_reg_425;
        else 
            grp_fu_233_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_233_p1_assign_proc : process(ap_CS_fsm_state35, ap_CS_fsm_state36, N_1_reg_433, add_ln95_reg_446)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_233_p1 <= add_ln95_reg_446;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_233_p1 <= N_1_reg_433;
        else 
            grp_fu_233_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_275_ap_start_assign_proc : process(ap_CS_fsm_state1, mode_1_read_fu_80_p2, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (mode_1_read_fu_80_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_275_ap_start <= ap_const_logic_1;
        else 
            grp_fu_275_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_275_ce <= ap_const_logic_0;
        else 
            grp_fu_275_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_275_p0 <= std_logic_vector(signed(add_ln95_fu_263_p2) - signed(sub_ln95_fu_269_p1));

    grp_fu_293_ap_start_assign_proc : process(ap_CS_fsm_state1, mode_1_read_fu_80_p2, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (mode_1_read_fu_80_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_293_ap_start <= ap_const_logic_1;
        else 
            grp_fu_293_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_293_ce <= ap_const_logic_0;
        else 
            grp_fu_293_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_293_p0 <= std_logic_vector(unsigned(add_ln98_fu_281_p2) - unsigned(sub_ln98_fu_287_p1));
    icmp_ln97_fu_336_p2 <= "1" when (unsigned(cycles_write_block_reg_477) > unsigned(cycles_read_block_reg_484)) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state39, ap_block_state39_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_321_p4 <= grp_fu_233_p2(31 downto 4);
    max_cycles_fu_340_p3 <= 
        cycles_write_block_reg_477 when (icmp_ln97_fu_336_p2(0) = '1') else 
        cycles_read_block_reg_484;
    mode_1_read_fu_80_p2 <= mode_dout;

    mode_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mode_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_blk_n <= mode_empty_n;
        else 
            mode_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mode_c70_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, mode_c70_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_c70_blk_n <= mode_c70_full_n;
        else 
            mode_c70_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mode_c70_din <= mode_dout;

    mode_c70_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_c70_write <= ap_const_logic_1;
        else 
            mode_c70_write <= ap_const_logic_0;
        end if; 
    end process;


    mode_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mode_read <= ap_const_logic_1;
        else 
            mode_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln93_fu_217_p0 <= mul_ln93_fu_217_p00(28 - 1 downto 0);
    mul_ln93_fu_217_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(div29_cast_reg_467),60));
    mul_ln93_fu_217_p1 <= mul_ln93_fu_217_p10(32 - 1 downto 0);
    mul_ln93_fu_217_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(baseIter_fu_357_p2),60));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    shl_ln95_fu_257_p2 <= std_logic_vector(shift_left(unsigned(P_dout),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub143_fu_392_p2 <= std_logic_vector(unsigned(baseIter_reg_501) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln95_fu_269_p1 <= K_dout;
    sub_ln98_fu_287_p1 <= K_dout;
    trunc_ln156_fu_403_p1 <= S_1_reg_416(4 - 1 downto 0);
    trunc_ln158_fu_407_p1 <= add63_fu_398_p2(4 - 1 downto 0);
    zext_ln98_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_248),32));
end behav;
