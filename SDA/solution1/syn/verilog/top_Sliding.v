// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_Sliding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv3_samepad_dout,
        conv3_samepad_empty_n,
        conv3_samepad_read,
        conv3_sild_din,
        conv3_sild_full_n,
        conv3_sild_write,
        R,
        C,
        N,
        M,
        mode
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] conv3_samepad_dout;
input   conv3_samepad_empty_n;
output   conv3_samepad_read;
output  [127:0] conv3_sild_din;
input   conv3_sild_full_n;
output   conv3_sild_write;
input  [31:0] R;
input  [31:0] C;
input  [31:0] N;
input  [31:0] M;
input  [0:0] mode;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv3_samepad_read;
reg conv3_sild_write;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] mode_read_read_fu_46_p2;
wire   [31:0] cycles_write_block_fu_100_p2;
reg   [31:0] cycles_write_block_reg_268;
wire  signed [31:0] add_ln87_fu_151_p2;
reg   [31:0] add_ln87_reg_275;
wire   [27:0] grp_fu_114_p4;
reg   [27:0] cycles_read_block_reg_282;
reg   [27:0] div17_cast_reg_288;
wire  signed [31:0] max_cycles_fu_176_p3;
reg   [31:0] max_cycles_reg_293;
wire    ap_CS_fsm_state2;
reg   [27:0] lshr_ln2_reg_298;
wire   [31:0] baseIter_fu_199_p2;
reg   [31:0] baseIter_reg_303;
wire   [59:0] mul_ln84_fu_96_p2;
reg   [59:0] mul_ln84_reg_309;
reg   [27:0] div_reg_314;
wire    ap_CS_fsm_state3;
reg   [12:0] div30_cast_reg_319;
wire   [31:0] sub_fu_234_p2;
reg   [31:0] sub_reg_324;
wire   [31:0] add80_fu_240_p2;
reg   [31:0] add80_reg_329;
wire    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start;
wire    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done;
wire    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_idle;
wire    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_ready;
wire    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read;
wire   [127:0] grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_din;
wire    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write;
reg    grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [27:0] mul_ln84_fu_96_p0;
wire   [31:0] mul_ln84_fu_96_p1;
wire   [27:0] cycles_write_block_fu_100_p0;
reg  signed [31:0] grp_fu_105_p0;
wire  signed [31:0] sub_ln89_fu_189_p2;
wire  signed [31:0] mul_ln89_1_fu_110_p0;
wire   [31:0] grp_fu_105_p2;
wire  signed [31:0] shl_ln86_fu_124_p0;
wire   [31:0] shl_ln86_fu_124_p2;
wire  signed [31:0] add_ln86_fu_130_p1;
wire   [31:0] add_ln86_fu_130_p2;
wire   [27:0] lshr_ln_fu_136_p4;
wire  signed [31:0] add_ln87_fu_151_p0;
wire   [31:0] zext_ln87_fu_168_p1;
wire   [0:0] icmp_ln88_fu_171_p2;
wire   [31:0] shl_ln89_fu_184_p2;
wire   [31:0] mul_ln89_1_fu_110_p2;
wire   [31:0] zext_ln89_fu_195_p1;
wire  signed [31:0] div_fu_214_p1;
wire  signed [31:0] div30_cast_fu_224_p1;
wire  signed [31:0] add80_fu_240_p0;
reg    ap_block_state4_on_subcall_done;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [31:0] cycles_write_block_fu_100_p00;
wire   [59:0] mul_ln84_fu_96_p00;
wire   [59:0] mul_ln84_fu_96_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg = 1'b0;
end

top_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2 grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start),
    .ap_done(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done),
    .ap_idle(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_idle),
    .ap_ready(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_ready),
    .conv3_samepad_dout(conv3_samepad_dout),
    .conv3_samepad_empty_n(conv3_samepad_empty_n),
    .conv3_samepad_read(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read),
    .conv3_sild_din(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_din),
    .conv3_sild_full_n(conv3_sild_full_n),
    .conv3_sild_write(grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write),
    .mul_ln84(mul_ln84_reg_309),
    .sub(sub_reg_324),
    .div30_cast(div30_cast_reg_319),
    .empty(div_reg_314),
    .baseIter(baseIter_reg_303),
    .zext_ln89(lshr_ln2_reg_298),
    .add_ln87(add_ln87_reg_275),
    .max_cycles(max_cycles_reg_293),
    .cycles_read_block_1(cycles_read_block_reg_282),
    .add80(add80_reg_329),
    .cycles_write_block(cycles_write_block_reg_268),
    .C(C)
);

top_mul_28ns_32ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 60 ))
mul_28ns_32ns_60_1_1_U51(
    .din0(mul_ln84_fu_96_p0),
    .din1(mul_ln84_fu_96_p1),
    .dout(mul_ln84_fu_96_p2)
);

top_mul_28ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_28ns_32s_32_1_1_U52(
    .din0(cycles_write_block_fu_100_p0),
    .din1(C),
    .dout(cycles_write_block_fu_100_p2)
);

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U53(
    .din0(grp_fu_105_p0),
    .din1(N),
    .dout(grp_fu_105_p2)
);

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U54(
    .din0(mul_ln89_1_fu_110_p0),
    .din1(R),
    .dout(mul_ln89_1_fu_110_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_ready == 1'b1)) begin
            grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add80_reg_329 <= add80_fu_240_p2;
        div30_cast_reg_319 <= {{div30_cast_fu_224_p1[16:4]}};
        div_reg_314 <= {{div_fu_214_p1[31:4]}};
        sub_reg_324 <= sub_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln87_reg_275 <= add_ln87_fu_151_p2;
        cycles_read_block_reg_282 <= {{grp_fu_105_p2[31:4]}};
        cycles_write_block_reg_268 <= cycles_write_block_fu_100_p2;
        div17_cast_reg_288 <= {{M[31:4]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        baseIter_reg_303 <= baseIter_fu_199_p2;
        lshr_ln2_reg_298 <= {{grp_fu_105_p2[31:4]}};
        max_cycles_reg_293 <= max_cycles_fu_176_p3;
        mul_ln84_reg_309 <= mul_ln84_fu_96_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((mode == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        conv3_samepad_read = grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_samepad_read;
    end else begin
        conv3_samepad_read = 1'b0;
    end
end

always @ (*) begin
    if (((mode == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        conv3_sild_write = grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_write;
    end else begin
        conv3_sild_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_105_p0 = sub_ln89_fu_189_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_105_p0 = add_ln87_fu_151_p2;
    end else begin
        grp_fu_105_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (mode_read_read_fu_46_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((ap_start == 1'b1) & (mode == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add80_fu_240_p0 = R;

assign add80_fu_240_p2 = ($signed(add80_fu_240_p0) + $signed(32'd2));

assign add_ln86_fu_130_p1 = N;

assign add_ln86_fu_130_p2 = ($signed(shl_ln86_fu_124_p2) + $signed(add_ln86_fu_130_p1));

assign add_ln87_fu_151_p0 = C;

assign add_ln87_fu_151_p2 = ($signed(add_ln87_fu_151_p0) + $signed(32'd2));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_done == 1'b0) & (mode == 1'd1));
end

assign baseIter_fu_199_p2 = (mul_ln89_1_fu_110_p2 + zext_ln89_fu_195_p1);

assign conv3_sild_din = grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_conv3_sild_din;

assign cycles_write_block_fu_100_p0 = cycles_write_block_fu_100_p00;

assign cycles_write_block_fu_100_p00 = lshr_ln_fu_136_p4;

assign div30_cast_fu_224_p1 = N;

assign div_fu_214_p1 = N;

assign grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start = grp_Sliding_Pipeline_VITIS_LOOP_107_1_VITIS_LOOP_110_2_fu_76_ap_start_reg;

assign grp_fu_114_p4 = {{grp_fu_105_p2[31:4]}};

assign icmp_ln88_fu_171_p2 = ((cycles_write_block_reg_268 > zext_ln87_fu_168_p1) ? 1'b1 : 1'b0);

assign lshr_ln_fu_136_p4 = {{add_ln86_fu_130_p2[31:4]}};

assign max_cycles_fu_176_p3 = ((icmp_ln88_fu_171_p2[0:0] == 1'b1) ? cycles_write_block_reg_268 : zext_ln87_fu_168_p1);

assign mode_read_read_fu_46_p2 = mode;

assign mul_ln84_fu_96_p0 = mul_ln84_fu_96_p00;

assign mul_ln84_fu_96_p00 = div17_cast_reg_288;

assign mul_ln84_fu_96_p1 = mul_ln84_fu_96_p10;

assign mul_ln84_fu_96_p10 = baseIter_fu_199_p2;

assign mul_ln89_1_fu_110_p0 = ((icmp_ln88_fu_171_p2[0:0] == 1'b1) ? cycles_write_block_reg_268 : zext_ln87_fu_168_p1);

assign shl_ln86_fu_124_p0 = N;

assign shl_ln86_fu_124_p2 = shl_ln86_fu_124_p0 << 32'd3;

assign shl_ln89_fu_184_p2 = add_ln87_reg_275 << 32'd2;

assign sub_fu_234_p2 = ($signed(baseIter_reg_303) + $signed(32'd4294967295));

assign sub_ln89_fu_189_p2 = (shl_ln89_fu_184_p2 - add_ln87_reg_275);

assign zext_ln87_fu_168_p1 = cycles_read_block_reg_282;

assign zext_ln89_fu_195_p1 = grp_fu_114_p4;

endmodule //top_Sliding
