// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_Padding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        conv_a_dout,
        conv_a_num_data_valid,
        conv_a_fifo_cap,
        conv_a_empty_n,
        conv_a_read,
        conv3_samepad_din,
        conv3_samepad_num_data_valid,
        conv3_samepad_fifo_cap,
        conv3_samepad_full_n,
        conv3_samepad_write,
        R_dout,
        R_num_data_valid,
        R_fifo_cap,
        R_empty_n,
        R_read,
        C_dout,
        C_num_data_valid,
        C_fifo_cap,
        C_empty_n,
        C_read,
        N_dout,
        N_num_data_valid,
        N_fifo_cap,
        N_empty_n,
        N_read,
        M_dout,
        M_num_data_valid,
        M_fifo_cap,
        M_empty_n,
        M_read,
        P_dout,
        P_num_data_valid,
        P_fifo_cap,
        P_empty_n,
        P_read,
        mode_dout,
        mode_num_data_valid,
        mode_fifo_cap,
        mode_empty_n,
        mode_read,
        R_c45_din,
        R_c45_num_data_valid,
        R_c45_fifo_cap,
        R_c45_full_n,
        R_c45_write,
        C_c47_din,
        C_c47_num_data_valid,
        C_c47_fifo_cap,
        C_c47_full_n,
        C_c47_write,
        N_c50_din,
        N_c50_num_data_valid,
        N_c50_fifo_cap,
        N_c50_full_n,
        N_c50_write,
        M_c55_din,
        M_c55_num_data_valid,
        M_c55_fifo_cap,
        M_c55_full_n,
        M_c55_write,
        P_c59_din,
        P_c59_num_data_valid,
        P_c59_fifo_cap,
        P_c59_full_n,
        P_c59_write,
        mode_c71_din,
        mode_c71_num_data_valid,
        mode_c71_fifo_cap,
        mode_c71_full_n,
        mode_c71_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] conv_a_dout;
input  [7:0] conv_a_num_data_valid;
input  [7:0] conv_a_fifo_cap;
input   conv_a_empty_n;
output   conv_a_read;
output  [511:0] conv3_samepad_din;
input  [3:0] conv3_samepad_num_data_valid;
input  [3:0] conv3_samepad_fifo_cap;
input   conv3_samepad_full_n;
output   conv3_samepad_write;
input  [31:0] R_dout;
input  [2:0] R_num_data_valid;
input  [2:0] R_fifo_cap;
input   R_empty_n;
output   R_read;
input  [31:0] C_dout;
input  [2:0] C_num_data_valid;
input  [2:0] C_fifo_cap;
input   C_empty_n;
output   C_read;
input  [31:0] N_dout;
input  [2:0] N_num_data_valid;
input  [2:0] N_fifo_cap;
input   N_empty_n;
output   N_read;
input  [31:0] M_dout;
input  [2:0] M_num_data_valid;
input  [2:0] M_fifo_cap;
input   M_empty_n;
output   M_read;
input  [31:0] P_dout;
input  [2:0] P_num_data_valid;
input  [2:0] P_fifo_cap;
input   P_empty_n;
output   P_read;
input  [0:0] mode_dout;
input  [2:0] mode_num_data_valid;
input  [2:0] mode_fifo_cap;
input   mode_empty_n;
output   mode_read;
output  [31:0] R_c45_din;
input  [2:0] R_c45_num_data_valid;
input  [2:0] R_c45_fifo_cap;
input   R_c45_full_n;
output   R_c45_write;
output  [31:0] C_c47_din;
input  [2:0] C_c47_num_data_valid;
input  [2:0] C_c47_fifo_cap;
input   C_c47_full_n;
output   C_c47_write;
output  [31:0] N_c50_din;
input  [2:0] N_c50_num_data_valid;
input  [2:0] N_c50_fifo_cap;
input   N_c50_full_n;
output   N_c50_write;
output  [31:0] M_c55_din;
input  [2:0] M_c55_num_data_valid;
input  [2:0] M_c55_fifo_cap;
input   M_c55_full_n;
output   M_c55_write;
output  [31:0] P_c59_din;
input  [2:0] P_c59_num_data_valid;
input  [2:0] P_c59_fifo_cap;
input   P_c59_full_n;
output   P_c59_write;
output  [0:0] mode_c71_din;
input  [2:0] mode_c71_num_data_valid;
input  [2:0] mode_c71_fifo_cap;
input   mode_c71_full_n;
output   mode_c71_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_a_read;
reg conv3_samepad_write;
reg R_read;
reg C_read;
reg N_read;
reg M_read;
reg P_read;
reg mode_read;
reg R_c45_write;
reg C_c47_write;
reg N_c50_write;
reg M_c55_write;
reg P_c59_write;
reg mode_c71_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    R_blk_n;
reg    C_blk_n;
reg    N_blk_n;
reg    M_blk_n;
reg    P_blk_n;
reg    mode_blk_n;
reg    R_c45_blk_n;
reg    C_c47_blk_n;
reg    N_c50_blk_n;
reg    M_c55_blk_n;
reg    P_c59_blk_n;
reg    mode_c71_blk_n;
wire   [0:0] mode_3_read_fu_68_p2;
reg   [0:0] mode_3_reg_252;
reg    ap_block_state1;
reg   [31:0] P_3_reg_256;
reg   [31:0] C_3_reg_264;
reg   [31:0] R_3_reg_270;
reg   [27:0] div_cast_reg_276;
reg   [27:0] div13_cast_reg_281;
wire   [59:0] bound_fu_172_p2;
reg   [59:0] bound_reg_287;
wire    ap_CS_fsm_state2;
wire   [91:0] bound4_fu_176_p2;
reg   [91:0] bound4_reg_292;
wire   [31:0] add18_fu_234_p2;
reg   [31:0] add18_reg_298;
wire    ap_CS_fsm_state3;
wire   [31:0] add23_fu_239_p2;
reg   [31:0] add23_reg_303;
wire   [119:0] bound17_fu_167_p2;
reg   [119:0] bound17_reg_308;
wire    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start;
wire    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done;
wire    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_idle;
wire    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_ready;
wire    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read;
wire   [511:0] grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_din;
wire    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write;
reg    grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg;
wire    ap_CS_fsm_state4;
wire   [27:0] bound17_fu_167_p0;
wire   [91:0] bound17_fu_167_p1;
wire   [31:0] bound_fu_172_p0;
wire   [27:0] bound_fu_172_p1;
wire   [31:0] bound4_fu_176_p0;
wire   [59:0] bound4_fu_176_p1;
wire   [31:0] empty_fu_200_p2;
wire   [31:0] add8_fu_210_p2;
wire   [31:0] add_fu_205_p2;
reg    ap_block_state4_on_subcall_done;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire   [119:0] bound17_fu_167_p00;
wire   [119:0] bound17_fu_167_p10;
wire   [91:0] bound4_fu_176_p00;
wire   [91:0] bound4_fu_176_p10;
wire   [59:0] bound_fu_172_p00;
wire   [59:0] bound_fu_172_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg = 1'b0;
end

top_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4 grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start),
    .ap_done(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done),
    .ap_idle(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_idle),
    .ap_ready(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_ready),
    .conv_a_dout(conv_a_dout),
    .conv_a_num_data_valid(8'd0),
    .conv_a_fifo_cap(8'd0),
    .conv_a_empty_n(conv_a_empty_n),
    .conv_a_read(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read),
    .conv3_samepad_din(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_din),
    .conv3_samepad_num_data_valid(4'd0),
    .conv3_samepad_fifo_cap(4'd0),
    .conv3_samepad_full_n(conv3_samepad_full_n),
    .conv3_samepad_write(grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write),
    .bound17(bound17_reg_308),
    .bound4(bound4_reg_292),
    .div13_cast(div13_cast_reg_281),
    .bound(bound_reg_287),
    .P_3(P_3_reg_256),
    .add23(add23_reg_303),
    .add18(add18_reg_298)
);

top_mul_28ns_92ns_120_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 92 ),
    .dout_WIDTH( 120 ))
mul_28ns_92ns_120_1_1_U603(
    .din0(bound17_fu_167_p0),
    .din1(bound17_fu_167_p1),
    .dout(bound17_fu_167_p2)
);

top_mul_32ns_28ns_60_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 60 ))
mul_32ns_28ns_60_1_1_U604(
    .din0(bound_fu_172_p0),
    .din1(bound_fu_172_p1),
    .dout(bound_fu_172_p2)
);

top_mul_32ns_60ns_92_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 60 ),
    .dout_WIDTH( 92 ))
mul_32ns_60ns_92_1_1_U605(
    .din0(bound4_fu_176_p0),
    .din1(bound4_fu_176_p1),
    .dout(bound4_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg <= 1'b1;
        end else if ((grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_ready == 1'b1)) begin
            grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        C_3_reg_264 <= C_dout;
        P_3_reg_256 <= P_dout;
        R_3_reg_270 <= R_dout;
        div13_cast_reg_281 <= {{N_dout[31:4]}};
        div_cast_reg_276 <= {{M_dout[31:4]}};
        mode_3_reg_252 <= mode_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add18_reg_298 <= add18_fu_234_p2;
        add23_reg_303 <= add23_fu_239_p2;
        bound17_reg_308 <= bound17_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound4_reg_292 <= bound4_fu_176_p2;
        bound_reg_287 <= bound_fu_172_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_blk_n = C_empty_n;
    end else begin
        C_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        C_c47_blk_n = C_c47_full_n;
    end else begin
        C_c47_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        C_c47_write = 1'b1;
    end else begin
        C_c47_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        C_read = 1'b1;
    end else begin
        C_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        M_blk_n = M_empty_n;
    end else begin
        M_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        M_c55_blk_n = M_c55_full_n;
    end else begin
        M_c55_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        M_c55_write = 1'b1;
    end else begin
        M_c55_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        M_read = 1'b1;
    end else begin
        M_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_c50_blk_n = N_c50_full_n;
    end else begin
        N_c50_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        N_c50_write = 1'b1;
    end else begin
        N_c50_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        P_blk_n = P_empty_n;
    end else begin
        P_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        P_c59_blk_n = P_c59_full_n;
    end else begin
        P_c59_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        P_c59_write = 1'b1;
    end else begin
        P_c59_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        P_read = 1'b1;
    end else begin
        P_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_blk_n = R_empty_n;
    end else begin
        R_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        R_c45_blk_n = R_c45_full_n;
    end else begin
        R_c45_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        R_c45_write = 1'b1;
    end else begin
        R_c45_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        R_read = 1'b1;
    end else begin
        R_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (mode_3_reg_252 == 1'd1))) begin
        conv3_samepad_write = grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_write;
    end else begin
        conv3_samepad_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (mode_3_reg_252 == 1'd1))) begin
        conv_a_read = grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv_a_read;
    end else begin
        conv_a_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_blk_n = mode_empty_n;
    end else begin
        mode_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mode_c71_blk_n = mode_c71_full_n;
    end else begin
        mode_c71_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        mode_c71_write = 1'b1;
    end else begin
        mode_c71_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        mode_read = 1'b1;
    end else begin
        mode_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1) & (mode_3_read_fu_68_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1) & (mode_3_read_fu_68_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_c47_din = C_dout;

assign M_c55_din = M_dout;

assign N_c50_din = N_dout;

assign P_c59_din = P_dout;

assign R_c45_din = R_dout;

assign add18_fu_234_p2 = (P_3_reg_256 + C_3_reg_264);

assign add23_fu_239_p2 = (P_3_reg_256 + R_3_reg_270);

assign add8_fu_210_p2 = (C_3_reg_264 + empty_fu_200_p2);

assign add_fu_205_p2 = (R_3_reg_270 + empty_fu_200_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (mode_empty_n == 1'b0) | (1'b0 == M_c55_full_n) | (1'b0 == N_c50_full_n) | (1'b0 == C_c47_full_n) | (1'b0 == R_c45_full_n) | (1'b0 == P_empty_n) | (1'b0 == M_empty_n) | (1'b0 == N_empty_n) | (1'b0 == C_empty_n) | (1'b0 == R_empty_n) | (1'b0 == P_c59_full_n) | (ap_done_reg == 1'b1) | (mode_c71_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_done == 1'b0) & (mode_3_reg_252 == 1'd1));
end

assign bound17_fu_167_p0 = bound17_fu_167_p00;

assign bound17_fu_167_p00 = div_cast_reg_276;

assign bound17_fu_167_p1 = bound17_fu_167_p10;

assign bound17_fu_167_p10 = bound4_reg_292;

assign bound4_fu_176_p0 = bound4_fu_176_p00;

assign bound4_fu_176_p00 = add_fu_205_p2;

assign bound4_fu_176_p1 = bound4_fu_176_p10;

assign bound4_fu_176_p10 = bound_fu_172_p2;

assign bound_fu_172_p0 = bound_fu_172_p00;

assign bound_fu_172_p00 = add8_fu_210_p2;

assign bound_fu_172_p1 = bound_fu_172_p10;

assign bound_fu_172_p10 = div13_cast_reg_281;

assign conv3_samepad_din = grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_conv3_samepad_din;

assign empty_fu_200_p2 = P_3_reg_256 << 32'd1;

assign grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start = grp_Padding_Pipeline_VITIS_LOOP_62_1_VITIS_LOOP_65_2_VITIS_LOOP_68_3_VITIS_LOOP_71_4_fu_152_ap_start_reg;

assign mode_3_read_fu_68_p2 = mode_dout;

assign mode_c71_din = mode_dout;

endmodule //top_Padding
