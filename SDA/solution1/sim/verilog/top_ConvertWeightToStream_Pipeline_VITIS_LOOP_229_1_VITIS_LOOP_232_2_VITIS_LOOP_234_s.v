// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_ConvertWeightToStream_Pipeline_VITIS_LOOP_229_1_VITIS_LOOP_232_2_VITIS_LOOP_234_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_CONV_BUS_AWVALID,
        m_axi_CONV_BUS_AWREADY,
        m_axi_CONV_BUS_AWADDR,
        m_axi_CONV_BUS_AWID,
        m_axi_CONV_BUS_AWLEN,
        m_axi_CONV_BUS_AWSIZE,
        m_axi_CONV_BUS_AWBURST,
        m_axi_CONV_BUS_AWLOCK,
        m_axi_CONV_BUS_AWCACHE,
        m_axi_CONV_BUS_AWPROT,
        m_axi_CONV_BUS_AWQOS,
        m_axi_CONV_BUS_AWREGION,
        m_axi_CONV_BUS_AWUSER,
        m_axi_CONV_BUS_WVALID,
        m_axi_CONV_BUS_WREADY,
        m_axi_CONV_BUS_WDATA,
        m_axi_CONV_BUS_WSTRB,
        m_axi_CONV_BUS_WLAST,
        m_axi_CONV_BUS_WID,
        m_axi_CONV_BUS_WUSER,
        m_axi_CONV_BUS_ARVALID,
        m_axi_CONV_BUS_ARREADY,
        m_axi_CONV_BUS_ARADDR,
        m_axi_CONV_BUS_ARID,
        m_axi_CONV_BUS_ARLEN,
        m_axi_CONV_BUS_ARSIZE,
        m_axi_CONV_BUS_ARBURST,
        m_axi_CONV_BUS_ARLOCK,
        m_axi_CONV_BUS_ARCACHE,
        m_axi_CONV_BUS_ARPROT,
        m_axi_CONV_BUS_ARQOS,
        m_axi_CONV_BUS_ARREGION,
        m_axi_CONV_BUS_ARUSER,
        m_axi_CONV_BUS_RVALID,
        m_axi_CONV_BUS_RREADY,
        m_axi_CONV_BUS_RDATA,
        m_axi_CONV_BUS_RLAST,
        m_axi_CONV_BUS_RID,
        m_axi_CONV_BUS_RFIFONUM,
        m_axi_CONV_BUS_RUSER,
        m_axi_CONV_BUS_RRESP,
        m_axi_CONV_BUS_BVALID,
        m_axi_CONV_BUS_BREADY,
        m_axi_CONV_BUS_BRESP,
        m_axi_CONV_BUS_BID,
        m_axi_CONV_BUS_BUSER,
        fifo_conv_w_2_din,
        fifo_conv_w_2_num_data_valid,
        fifo_conv_w_2_fifo_cap,
        fifo_conv_w_2_full_n,
        fifo_conv_w_2_write,
        fifo_conv_w_1_din,
        fifo_conv_w_1_num_data_valid,
        fifo_conv_w_1_fifo_cap,
        fifo_conv_w_1_full_n,
        fifo_conv_w_1_write,
        fifo_conv_w_0_din,
        fifo_conv_w_0_num_data_valid,
        fifo_conv_w_0_fifo_cap,
        fifo_conv_w_0_full_n,
        fifo_conv_w_0_write,
        fifo_conv_w_3_din,
        fifo_conv_w_3_num_data_valid,
        fifo_conv_w_3_fifo_cap,
        fifo_conv_w_3_full_n,
        fifo_conv_w_3_write,
        bound17,
        zext_ln229,
        bound4,
        and_ln,
        bound,
        mul14,
        Conv_Weight
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_CONV_BUS_AWVALID;
input   m_axi_CONV_BUS_AWREADY;
output  [63:0] m_axi_CONV_BUS_AWADDR;
output  [0:0] m_axi_CONV_BUS_AWID;
output  [31:0] m_axi_CONV_BUS_AWLEN;
output  [2:0] m_axi_CONV_BUS_AWSIZE;
output  [1:0] m_axi_CONV_BUS_AWBURST;
output  [1:0] m_axi_CONV_BUS_AWLOCK;
output  [3:0] m_axi_CONV_BUS_AWCACHE;
output  [2:0] m_axi_CONV_BUS_AWPROT;
output  [3:0] m_axi_CONV_BUS_AWQOS;
output  [3:0] m_axi_CONV_BUS_AWREGION;
output  [0:0] m_axi_CONV_BUS_AWUSER;
output   m_axi_CONV_BUS_WVALID;
input   m_axi_CONV_BUS_WREADY;
output  [511:0] m_axi_CONV_BUS_WDATA;
output  [63:0] m_axi_CONV_BUS_WSTRB;
output   m_axi_CONV_BUS_WLAST;
output  [0:0] m_axi_CONV_BUS_WID;
output  [0:0] m_axi_CONV_BUS_WUSER;
output   m_axi_CONV_BUS_ARVALID;
input   m_axi_CONV_BUS_ARREADY;
output  [63:0] m_axi_CONV_BUS_ARADDR;
output  [0:0] m_axi_CONV_BUS_ARID;
output  [31:0] m_axi_CONV_BUS_ARLEN;
output  [2:0] m_axi_CONV_BUS_ARSIZE;
output  [1:0] m_axi_CONV_BUS_ARBURST;
output  [1:0] m_axi_CONV_BUS_ARLOCK;
output  [3:0] m_axi_CONV_BUS_ARCACHE;
output  [2:0] m_axi_CONV_BUS_ARPROT;
output  [3:0] m_axi_CONV_BUS_ARQOS;
output  [3:0] m_axi_CONV_BUS_ARREGION;
output  [0:0] m_axi_CONV_BUS_ARUSER;
input   m_axi_CONV_BUS_RVALID;
output   m_axi_CONV_BUS_RREADY;
input  [511:0] m_axi_CONV_BUS_RDATA;
input   m_axi_CONV_BUS_RLAST;
input  [0:0] m_axi_CONV_BUS_RID;
input  [8:0] m_axi_CONV_BUS_RFIFONUM;
input  [0:0] m_axi_CONV_BUS_RUSER;
input  [1:0] m_axi_CONV_BUS_RRESP;
input   m_axi_CONV_BUS_BVALID;
output   m_axi_CONV_BUS_BREADY;
input  [1:0] m_axi_CONV_BUS_BRESP;
input  [0:0] m_axi_CONV_BUS_BID;
input  [0:0] m_axi_CONV_BUS_BUSER;
output  [511:0] fifo_conv_w_2_din;
input  [3:0] fifo_conv_w_2_num_data_valid;
input  [3:0] fifo_conv_w_2_fifo_cap;
input   fifo_conv_w_2_full_n;
output   fifo_conv_w_2_write;
output  [511:0] fifo_conv_w_1_din;
input  [3:0] fifo_conv_w_1_num_data_valid;
input  [3:0] fifo_conv_w_1_fifo_cap;
input   fifo_conv_w_1_full_n;
output   fifo_conv_w_1_write;
output  [511:0] fifo_conv_w_0_din;
input  [3:0] fifo_conv_w_0_num_data_valid;
input  [3:0] fifo_conv_w_0_fifo_cap;
input   fifo_conv_w_0_full_n;
output   fifo_conv_w_0_write;
output  [511:0] fifo_conv_w_3_din;
input  [3:0] fifo_conv_w_3_num_data_valid;
input  [3:0] fifo_conv_w_3_fifo_cap;
input   fifo_conv_w_3_full_n;
output   fifo_conv_w_3_write;
input  [91:0] bound17;
input  [29:0] zext_ln229;
input  [63:0] bound4;
input  [29:0] and_ln;
input  [61:0] bound;
input  [31:0] mul14;
input  [63:0] Conv_Weight;

reg ap_idle;
reg m_axi_CONV_BUS_ARVALID;
reg m_axi_CONV_BUS_RREADY;
reg fifo_conv_w_2_write;
reg fifo_conv_w_1_write;
reg fifo_conv_w_0_write;
reg fifo_conv_w_3_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
reg   [0:0] or_ln234_reg_694;
reg    ap_block_state3_io;
reg    ap_block_state11_pp0_stage0_iter10;
reg   [1:0] trunc_ln232_reg_698;
reg   [1:0] trunc_ln232_reg_698_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln229_fu_299_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    fifo_conv_w_0_blk_n;
wire    ap_block_pp0_stage0;
reg    CONV_BUS_blk_n_R;
reg    CONV_BUS_blk_n_AR;
reg    fifo_conv_w_1_blk_n;
reg    fifo_conv_w_2_blk_n;
reg    fifo_conv_w_3_blk_n;
reg   [0:0] first_iter_0_reg_233;
reg    ap_block_pp0_stage0_11001;
wire   [64:0] bound4_cast_fu_249_p1;
reg   [64:0] bound4_cast_reg_680;
wire   [31:0] zext_ln229_cast_fu_253_p1;
reg   [31:0] zext_ln229_cast_reg_685;
reg   [0:0] icmp_ln229_reg_690;
wire   [0:0] or_ln234_fu_413_p2;
wire   [1:0] trunc_ln232_fu_442_p1;
reg   [1:0] trunc_ln232_reg_698_pp0_iter2_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter3_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter4_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter5_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter6_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter7_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter8_reg;
reg   [1:0] trunc_ln232_reg_698_pp0_iter9_reg;
reg   [57:0] trunc_ln8_reg_702;
reg   [511:0] CONV_BUS_addr_read_reg_713;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_237_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln237_fu_600_p1;
reg   [29:0] j_fu_128;
wire   [29:0] select_ln237_fu_528_p3;
reg   [61:0] indvar_flatten_fu_132;
wire   [61:0] select_ln234_fu_548_p3;
reg   [2:0] i_fu_136;
wire   [2:0] select_ln232_1_fu_405_p3;
reg   [64:0] indvar_flatten12_fu_140;
wire   [64:0] select_ln232_2_fu_562_p3;
reg   [27:0] m_fu_144;
wire   [27:0] select_ln229_3_fu_377_p3;
reg   [91:0] indvar_flatten34_fu_148;
wire   [91:0] add_ln229_fu_304_p2;
reg    ap_block_pp0_stage0_01001;
wire   [27:0] empty_1052_fu_245_p1;
wire   [0:0] icmp_ln232_fu_322_p2;
wire   [0:0] icmp_ln237_fu_341_p2;
wire   [0:0] icmp_ln237_1_fu_346_p2;
wire   [0:0] icmp_ln234_fu_359_p2;
wire   [0:0] icmp_ln234_1_fu_364_p2;
wire   [27:0] m_2_fu_316_p2;
wire   [2:0] select_ln229_fu_327_p3;
wire   [0:0] select_ln229_2_fu_369_p3;
wire   [0:0] or_ln229_fu_335_p2;
wire   [0:0] select_ln229_1_fu_351_p3;
wire   [2:0] add_ln232_2_fu_385_p2;
wire   [0:0] select_ln232_fu_397_p3;
wire   [0:0] or_ln232_fu_391_p2;
wire   [31:0] empty_1052_fu_245_p2;
wire   [27:0] tmp_s_fu_424_p4;
wire   [1:0] mul_ln232_fu_450_p1;
wire   [31:0] mul_ln232_fu_450_p2;
wire   [27:0] tmp_2_fu_455_p4;
wire   [29:0] and_ln1_fu_465_p3;
wire   [31:0] tmp_1_fu_434_p3;
wire   [31:0] zext_ln232_1_fu_473_p1;
wire   [31:0] add_ln232_fu_477_p2;
wire   [37:0] shl_ln_fu_483_p3;
wire   [63:0] zext_ln232_2_fu_491_p1;
wire   [63:0] add_ln232_1_fu_495_p2;
wire   [0:0] or_ln237_fu_516_p2;
wire   [0:0] or_ln237_1_fu_522_p2;
wire   [29:0] add_ln237_fu_510_p2;
wire   [0:0] or_ln234_1_fu_542_p2;
wire   [61:0] add_ln234_fu_536_p2;
wire   [64:0] add_ln232_3_fu_556_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [31:0] empty_1052_fu_245_p10;
wire   [31:0] mul_ln232_fu_450_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 j_fu_128 = 30'd0;
#0 indvar_flatten_fu_132 = 62'd0;
#0 i_fu_136 = 3'd0;
#0 indvar_flatten12_fu_140 = 65'd0;
#0 m_fu_144 = 28'd0;
#0 indvar_flatten34_fu_148 = 92'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_32s_28ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 28 ),
    .dout_WIDTH( 32 ))
mul_32s_28ns_32_1_1_U724(
    .din0(mul14),
    .din1(empty_1052_fu_245_p1),
    .dout(empty_1052_fu_245_p2)
);

top_mul_32s_2ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mul_32s_2ns_32_1_1_U725(
    .din0(mul14),
    .din1(mul_ln232_fu_450_p1),
    .dout(mul_ln232_fu_450_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln229_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_233 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_233 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_136 <= 3'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln229_fu_299_p2 == 1'd0))) begin
            i_fu_136 <= select_ln232_1_fu_405_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_140 <= 65'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln229_fu_299_p2 == 1'd0))) begin
            indvar_flatten12_fu_140 <= select_ln232_2_fu_562_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten34_fu_148 <= 92'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln229_fu_299_p2 == 1'd0))) begin
            indvar_flatten34_fu_148 <= add_ln229_fu_304_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_132 <= 62'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln229_fu_299_p2 == 1'd0))) begin
            indvar_flatten_fu_132 <= select_ln234_fu_548_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_128 <= 30'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln229_fu_299_p2 == 1'd0))) begin
            j_fu_128 <= select_ln237_fu_528_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            m_fu_144 <= 28'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln229_fu_299_p2 == 1'd0))) begin
            m_fu_144 <= select_ln229_3_fu_377_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        CONV_BUS_addr_read_reg_713 <= m_axi_CONV_BUS_RDATA;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        trunc_ln232_reg_698_pp0_iter10_reg <= trunc_ln232_reg_698_pp0_iter9_reg;
        trunc_ln232_reg_698_pp0_iter2_reg <= trunc_ln232_reg_698;
        trunc_ln232_reg_698_pp0_iter3_reg <= trunc_ln232_reg_698_pp0_iter2_reg;
        trunc_ln232_reg_698_pp0_iter4_reg <= trunc_ln232_reg_698_pp0_iter3_reg;
        trunc_ln232_reg_698_pp0_iter5_reg <= trunc_ln232_reg_698_pp0_iter4_reg;
        trunc_ln232_reg_698_pp0_iter6_reg <= trunc_ln232_reg_698_pp0_iter5_reg;
        trunc_ln232_reg_698_pp0_iter7_reg <= trunc_ln232_reg_698_pp0_iter6_reg;
        trunc_ln232_reg_698_pp0_iter8_reg <= trunc_ln232_reg_698_pp0_iter7_reg;
        trunc_ln232_reg_698_pp0_iter9_reg <= trunc_ln232_reg_698_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        bound4_cast_reg_680[63 : 0] <= bound4_cast_fu_249_p1[63 : 0];
        icmp_ln229_reg_690 <= icmp_ln229_fu_299_p2;
        or_ln234_reg_694 <= or_ln234_fu_413_p2;
        trunc_ln232_reg_698 <= trunc_ln232_fu_442_p1;
        trunc_ln8_reg_702 <= {{add_ln232_1_fu_495_p2[63:6]}};
        zext_ln229_cast_reg_685[29 : 0] <= zext_ln229_cast_fu_253_p1[29 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln234_reg_694 == 1'd1))) begin
        CONV_BUS_blk_n_AR = m_axi_CONV_BUS_ARREADY;
    end else begin
        CONV_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        CONV_BUS_blk_n_R = m_axi_CONV_BUS_RVALID;
    end else begin
        CONV_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln229_fu_299_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter10_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln229_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_237_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_237_p4 = first_iter_0_reg_233;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd0))) begin
        fifo_conv_w_0_blk_n = fifo_conv_w_0_full_n;
    end else begin
        fifo_conv_w_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd0))) begin
        fifo_conv_w_0_write = 1'b1;
    end else begin
        fifo_conv_w_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd1))) begin
        fifo_conv_w_1_blk_n = fifo_conv_w_1_full_n;
    end else begin
        fifo_conv_w_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd1))) begin
        fifo_conv_w_1_write = 1'b1;
    end else begin
        fifo_conv_w_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd2))) begin
        fifo_conv_w_2_blk_n = fifo_conv_w_2_full_n;
    end else begin
        fifo_conv_w_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd2))) begin
        fifo_conv_w_2_write = 1'b1;
    end else begin
        fifo_conv_w_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd3))) begin
        fifo_conv_w_3_blk_n = fifo_conv_w_3_full_n;
    end else begin
        fifo_conv_w_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd3))) begin
        fifo_conv_w_3_write = 1'b1;
    end else begin
        fifo_conv_w_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln234_reg_694 == 1'd1))) begin
        m_axi_CONV_BUS_ARVALID = 1'b1;
    end else begin
        m_axi_CONV_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_CONV_BUS_RREADY = 1'b1;
    end else begin
        m_axi_CONV_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln229_fu_304_p2 = (indvar_flatten34_fu_148 + 92'd1);

assign add_ln232_1_fu_495_p2 = (zext_ln232_2_fu_491_p1 + Conv_Weight);

assign add_ln232_2_fu_385_p2 = (select_ln229_fu_327_p3 + 3'd1);

assign add_ln232_3_fu_556_p2 = (indvar_flatten12_fu_140 + 65'd1);

assign add_ln232_fu_477_p2 = (tmp_1_fu_434_p3 + zext_ln232_1_fu_473_p1);

assign add_ln234_fu_536_p2 = (indvar_flatten_fu_132 + 62'd1);

assign add_ln237_fu_510_p2 = (j_fu_128 + 30'd1);

assign and_ln1_fu_465_p3 = {{tmp_2_fu_455_p4}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = (m_axi_CONV_BUS_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = (((fifo_conv_w_3_full_n == 1'b0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd3)) | ((fifo_conv_w_0_full_n == 1'b0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd0)) | ((fifo_conv_w_1_full_n == 1'b0) & (trunc_ln232_reg_698_pp0_iter10_reg == 2'd1)) | ((trunc_ln232_reg_698_pp0_iter10_reg == 2'd2) & (fifo_conv_w_2_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_CONV_BUS_ARREADY == 1'b0) & (or_ln234_reg_694 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign bound4_cast_fu_249_p1 = bound4;

assign empty_1052_fu_245_p1 = empty_1052_fu_245_p10;

assign empty_1052_fu_245_p10 = select_ln229_3_fu_377_p3;

assign fifo_conv_w_0_din = CONV_BUS_addr_read_reg_713;

assign fifo_conv_w_1_din = CONV_BUS_addr_read_reg_713;

assign fifo_conv_w_2_din = CONV_BUS_addr_read_reg_713;

assign fifo_conv_w_3_din = CONV_BUS_addr_read_reg_713;

assign icmp_ln229_fu_299_p2 = ((indvar_flatten34_fu_148 == bound17) ? 1'b1 : 1'b0);

assign icmp_ln232_fu_322_p2 = ((indvar_flatten12_fu_140 == bound4_cast_reg_680) ? 1'b1 : 1'b0);

assign icmp_ln234_1_fu_364_p2 = ((indvar_flatten_fu_132 == bound) ? 1'b1 : 1'b0);

assign icmp_ln234_fu_359_p2 = ((bound == 62'd0) ? 1'b1 : 1'b0);

assign icmp_ln237_1_fu_346_p2 = ((j_fu_128 == and_ln) ? 1'b1 : 1'b0);

assign icmp_ln237_fu_341_p2 = ((and_ln == 30'd0) ? 1'b1 : 1'b0);

assign m_2_fu_316_p2 = (m_fu_144 + 28'd1);

assign m_axi_CONV_BUS_ARADDR = sext_ln237_fu_600_p1;

assign m_axi_CONV_BUS_ARBURST = 2'd0;

assign m_axi_CONV_BUS_ARCACHE = 4'd0;

assign m_axi_CONV_BUS_ARID = 1'd0;

assign m_axi_CONV_BUS_ARLEN = zext_ln229_cast_reg_685;

assign m_axi_CONV_BUS_ARLOCK = 2'd0;

assign m_axi_CONV_BUS_ARPROT = 3'd0;

assign m_axi_CONV_BUS_ARQOS = 4'd0;

assign m_axi_CONV_BUS_ARREGION = 4'd0;

assign m_axi_CONV_BUS_ARSIZE = 3'd0;

assign m_axi_CONV_BUS_ARUSER = 1'd0;

assign m_axi_CONV_BUS_AWADDR = 64'd0;

assign m_axi_CONV_BUS_AWBURST = 2'd0;

assign m_axi_CONV_BUS_AWCACHE = 4'd0;

assign m_axi_CONV_BUS_AWID = 1'd0;

assign m_axi_CONV_BUS_AWLEN = 32'd0;

assign m_axi_CONV_BUS_AWLOCK = 2'd0;

assign m_axi_CONV_BUS_AWPROT = 3'd0;

assign m_axi_CONV_BUS_AWQOS = 4'd0;

assign m_axi_CONV_BUS_AWREGION = 4'd0;

assign m_axi_CONV_BUS_AWSIZE = 3'd0;

assign m_axi_CONV_BUS_AWUSER = 1'd0;

assign m_axi_CONV_BUS_AWVALID = 1'b0;

assign m_axi_CONV_BUS_BREADY = 1'b0;

assign m_axi_CONV_BUS_WDATA = 512'd0;

assign m_axi_CONV_BUS_WID = 1'd0;

assign m_axi_CONV_BUS_WLAST = 1'b0;

assign m_axi_CONV_BUS_WSTRB = 64'd0;

assign m_axi_CONV_BUS_WUSER = 1'd0;

assign m_axi_CONV_BUS_WVALID = 1'b0;

assign mul_ln232_fu_450_p1 = mul_ln232_fu_450_p10;

assign mul_ln232_fu_450_p10 = trunc_ln232_fu_442_p1;

assign or_ln229_fu_335_p2 = (icmp_ln232_fu_322_p2 | ap_phi_mux_first_iter_0_phi_fu_237_p4);

assign or_ln232_fu_391_p2 = (select_ln229_2_fu_369_p3 | or_ln229_fu_335_p2);

assign or_ln234_1_fu_542_p2 = (select_ln229_2_fu_369_p3 | icmp_ln232_fu_322_p2);

assign or_ln234_fu_413_p2 = (select_ln232_fu_397_p3 | or_ln232_fu_391_p2);

assign or_ln237_1_fu_522_p2 = (or_ln237_fu_516_p2 | icmp_ln232_fu_322_p2);

assign or_ln237_fu_516_p2 = (select_ln232_fu_397_p3 | select_ln229_2_fu_369_p3);

assign select_ln229_1_fu_351_p3 = ((icmp_ln232_fu_322_p2[0:0] == 1'b1) ? icmp_ln237_fu_341_p2 : icmp_ln237_1_fu_346_p2);

assign select_ln229_2_fu_369_p3 = ((icmp_ln232_fu_322_p2[0:0] == 1'b1) ? icmp_ln234_fu_359_p2 : icmp_ln234_1_fu_364_p2);

assign select_ln229_3_fu_377_p3 = ((icmp_ln232_fu_322_p2[0:0] == 1'b1) ? m_2_fu_316_p2 : m_fu_144);

assign select_ln229_fu_327_p3 = ((icmp_ln232_fu_322_p2[0:0] == 1'b1) ? 3'd0 : i_fu_136);

assign select_ln232_1_fu_405_p3 = ((select_ln229_2_fu_369_p3[0:0] == 1'b1) ? add_ln232_2_fu_385_p2 : select_ln229_fu_327_p3);

assign select_ln232_2_fu_562_p3 = ((icmp_ln232_fu_322_p2[0:0] == 1'b1) ? 65'd1 : add_ln232_3_fu_556_p2);

assign select_ln232_fu_397_p3 = ((select_ln229_2_fu_369_p3[0:0] == 1'b1) ? icmp_ln237_fu_341_p2 : select_ln229_1_fu_351_p3);

assign select_ln234_fu_548_p3 = ((or_ln234_1_fu_542_p2[0:0] == 1'b1) ? 62'd1 : add_ln234_fu_536_p2);

assign select_ln237_fu_528_p3 = ((or_ln237_1_fu_522_p2[0:0] == 1'b1) ? 30'd1 : add_ln237_fu_510_p2);

assign sext_ln237_fu_600_p1 = $signed(trunc_ln8_reg_702);

assign shl_ln_fu_483_p3 = {{add_ln232_fu_477_p2}, {6'd0}};

assign tmp_1_fu_434_p3 = {{tmp_s_fu_424_p4}, {4'd0}};

assign tmp_2_fu_455_p4 = {{mul_ln232_fu_450_p2[31:4]}};

assign tmp_s_fu_424_p4 = {{empty_1052_fu_245_p2[31:4]}};

assign trunc_ln232_fu_442_p1 = select_ln232_1_fu_405_p3[1:0];

assign zext_ln229_cast_fu_253_p1 = zext_ln229;

assign zext_ln232_1_fu_473_p1 = and_ln1_fu_465_p3;

assign zext_ln232_2_fu_491_p1 = shl_ln_fu_483_p3;

always @ (posedge ap_clk) begin
    bound4_cast_reg_680[64] <= 1'b0;
    zext_ln229_cast_reg_685[31:30] <= 2'b00;
end

endmodule //top_ConvertWeightToStream_Pipeline_VITIS_LOOP_229_1_VITIS_LOOP_232_2_VITIS_LOOP_234_s
