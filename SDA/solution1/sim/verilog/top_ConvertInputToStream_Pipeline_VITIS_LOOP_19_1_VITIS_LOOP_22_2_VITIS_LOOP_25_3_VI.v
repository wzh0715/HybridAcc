// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_ConvertInputToStream_Pipeline_VITIS_LOOP_19_1_VITIS_LOOP_22_2_VITIS_LOOP_25_3_VI (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_A_BUS_AWVALID,
        m_axi_A_BUS_AWREADY,
        m_axi_A_BUS_AWADDR,
        m_axi_A_BUS_AWID,
        m_axi_A_BUS_AWLEN,
        m_axi_A_BUS_AWSIZE,
        m_axi_A_BUS_AWBURST,
        m_axi_A_BUS_AWLOCK,
        m_axi_A_BUS_AWCACHE,
        m_axi_A_BUS_AWPROT,
        m_axi_A_BUS_AWQOS,
        m_axi_A_BUS_AWREGION,
        m_axi_A_BUS_AWUSER,
        m_axi_A_BUS_WVALID,
        m_axi_A_BUS_WREADY,
        m_axi_A_BUS_WDATA,
        m_axi_A_BUS_WSTRB,
        m_axi_A_BUS_WLAST,
        m_axi_A_BUS_WID,
        m_axi_A_BUS_WUSER,
        m_axi_A_BUS_ARVALID,
        m_axi_A_BUS_ARREADY,
        m_axi_A_BUS_ARADDR,
        m_axi_A_BUS_ARID,
        m_axi_A_BUS_ARLEN,
        m_axi_A_BUS_ARSIZE,
        m_axi_A_BUS_ARBURST,
        m_axi_A_BUS_ARLOCK,
        m_axi_A_BUS_ARCACHE,
        m_axi_A_BUS_ARPROT,
        m_axi_A_BUS_ARQOS,
        m_axi_A_BUS_ARREGION,
        m_axi_A_BUS_ARUSER,
        m_axi_A_BUS_RVALID,
        m_axi_A_BUS_RREADY,
        m_axi_A_BUS_RDATA,
        m_axi_A_BUS_RLAST,
        m_axi_A_BUS_RID,
        m_axi_A_BUS_RFIFONUM,
        m_axi_A_BUS_RUSER,
        m_axi_A_BUS_RRESP,
        m_axi_A_BUS_BVALID,
        m_axi_A_BUS_BREADY,
        m_axi_A_BUS_BRESP,
        m_axi_A_BUS_BID,
        m_axi_A_BUS_BUSER,
        conv_a_din,
        conv_a_num_data_valid,
        conv_a_fifo_cap,
        conv_a_full_n,
        conv_a_write,
        bound17,
        empty,
        bound4,
        div,
        bound,
        C,
        N,
        A
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_A_BUS_AWVALID;
input   m_axi_A_BUS_AWREADY;
output  [63:0] m_axi_A_BUS_AWADDR;
output  [0:0] m_axi_A_BUS_AWID;
output  [31:0] m_axi_A_BUS_AWLEN;
output  [2:0] m_axi_A_BUS_AWSIZE;
output  [1:0] m_axi_A_BUS_AWBURST;
output  [1:0] m_axi_A_BUS_AWLOCK;
output  [3:0] m_axi_A_BUS_AWCACHE;
output  [2:0] m_axi_A_BUS_AWPROT;
output  [3:0] m_axi_A_BUS_AWQOS;
output  [3:0] m_axi_A_BUS_AWREGION;
output  [0:0] m_axi_A_BUS_AWUSER;
output   m_axi_A_BUS_WVALID;
input   m_axi_A_BUS_WREADY;
output  [511:0] m_axi_A_BUS_WDATA;
output  [63:0] m_axi_A_BUS_WSTRB;
output   m_axi_A_BUS_WLAST;
output  [0:0] m_axi_A_BUS_WID;
output  [0:0] m_axi_A_BUS_WUSER;
output   m_axi_A_BUS_ARVALID;
input   m_axi_A_BUS_ARREADY;
output  [63:0] m_axi_A_BUS_ARADDR;
output  [0:0] m_axi_A_BUS_ARID;
output  [31:0] m_axi_A_BUS_ARLEN;
output  [2:0] m_axi_A_BUS_ARSIZE;
output  [1:0] m_axi_A_BUS_ARBURST;
output  [1:0] m_axi_A_BUS_ARLOCK;
output  [3:0] m_axi_A_BUS_ARCACHE;
output  [2:0] m_axi_A_BUS_ARPROT;
output  [3:0] m_axi_A_BUS_ARQOS;
output  [3:0] m_axi_A_BUS_ARREGION;
output  [0:0] m_axi_A_BUS_ARUSER;
input   m_axi_A_BUS_RVALID;
output   m_axi_A_BUS_RREADY;
input  [511:0] m_axi_A_BUS_RDATA;
input   m_axi_A_BUS_RLAST;
input  [0:0] m_axi_A_BUS_RID;
input  [8:0] m_axi_A_BUS_RFIFONUM;
input  [0:0] m_axi_A_BUS_RUSER;
input  [1:0] m_axi_A_BUS_RRESP;
input   m_axi_A_BUS_BVALID;
output   m_axi_A_BUS_BREADY;
input  [1:0] m_axi_A_BUS_BRESP;
input  [0:0] m_axi_A_BUS_BID;
input  [0:0] m_axi_A_BUS_BUSER;
output  [511:0] conv_a_din;
input  [7:0] conv_a_num_data_valid;
input  [7:0] conv_a_fifo_cap;
input   conv_a_full_n;
output   conv_a_write;
input  [119:0] bound17;
input  [27:0] empty;
input  [91:0] bound4;
input  [27:0] div;
input  [59:0] bound;
input  [31:0] C;
input  [31:0] N;
input  [63:0] A;

reg ap_idle;
reg m_axi_A_BUS_ARVALID;
reg m_axi_A_BUS_RREADY;
reg conv_a_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
reg   [0:0] or_ln25_reg_654;
reg   [0:0] or_ln25_reg_654_pp0_iter2_reg;
reg    ap_block_state4_io;
reg   [0:0] icmp_ln19_reg_640;
reg   [0:0] icmp_ln19_reg_640_pp0_iter10_reg;
reg    ap_block_state12_pp0_stage0_iter11;
reg   [0:0] icmp_ln19_reg_640_pp0_iter11_reg;
reg    ap_block_state13_pp0_stage0_iter12;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln19_fu_266_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    conv_a_blk_n;
wire    ap_block_pp0_stage0;
reg    A_BUS_blk_n_R;
reg    A_BUS_blk_n_AR;
reg   [0:0] first_iter_0_reg_196;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] p_cast_fu_220_p1;
reg   [31:0] p_cast_reg_635;
reg   [0:0] icmp_ln19_reg_640_pp0_iter2_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter3_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter4_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter5_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter6_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter7_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter8_reg;
reg   [0:0] icmp_ln19_reg_640_pp0_iter9_reg;
wire   [0:0] or_ln22_fu_341_p2;
reg   [0:0] or_ln22_reg_644;
wire   [0:0] select_ln22_1_fu_353_p3;
reg   [0:0] select_ln22_1_reg_649;
wire   [0:0] or_ln25_fu_370_p2;
wire  signed [31:0] tmp_fu_216_p2;
reg  signed [31:0] tmp_reg_658;
reg   [57:0] trunc_ln_reg_663;
reg   [511:0] A_BUS_addr_read_reg_674;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_200_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln28_fu_545_p1;
reg   [27:0] n_1_fu_106;
wire   [27:0] select_ln28_fu_394_p3;
reg   [31:0] c_fu_110;
wire  signed [31:0] select_ln25_fu_471_p3;
reg   [59:0] indvar_flatten_fu_114;
wire   [59:0] select_ln25_1_fu_408_p3;
reg   [31:0] r_fu_118;
wire  signed [31:0] select_ln22_2_fu_361_p3;
reg   [91:0] indvar_flatten12_fu_122;
wire   [91:0] select_ln22_3_fu_422_p3;
reg   [119:0] indvar_flatten33_fu_126;
wire   [119:0] add_ln19_fu_271_p2;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] empty_1061_fu_212_p0;
wire  signed [31:0] tmp_fu_216_p0;
wire   [0:0] icmp_ln22_fu_280_p2;
wire   [0:0] icmp_ln28_fu_299_p2;
wire   [0:0] icmp_ln28_1_fu_304_p2;
wire   [0:0] icmp_ln25_fu_317_p2;
wire   [0:0] icmp_ln25_1_fu_322_p2;
wire   [31:0] select_ln19_fu_285_p3;
wire   [0:0] select_ln19_2_fu_327_p3;
wire   [0:0] or_ln19_fu_293_p2;
wire   [0:0] select_ln19_1_fu_309_p3;
wire   [31:0] r_4_fu_335_p2;
wire   [0:0] or_ln22_1_fu_347_p2;
wire   [0:0] or_ln28_fu_382_p2;
wire   [0:0] or_ln28_1_fu_388_p2;
wire   [27:0] add_ln28_fu_376_p2;
wire   [59:0] add_ln25_1_fu_402_p2;
wire   [91:0] add_ln22_1_fu_416_p2;
wire   [31:0] select_ln22_fu_458_p3;
wire   [31:0] c_2_fu_465_p2;
wire   [31:0] empty_1060_fu_208_p2;
wire   [27:0] tmp_s_fu_479_p4;
wire   [31:0] empty_1061_fu_212_p2;
wire   [27:0] tmp_3_fu_493_p4;
wire   [28:0] p_cast5_fu_503_p1;
wire   [28:0] zext_ln25_fu_489_p1;
wire   [28:0] empty_1062_fu_507_p2;
wire   [34:0] tmp_4_fu_513_p3;
wire   [63:0] p_cast9_fu_521_p1;
wire   [63:0] empty_1063_fu_525_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 n_1_fu_106 = 28'd0;
#0 c_fu_110 = 32'd0;
#0 indvar_flatten_fu_114 = 60'd0;
#0 r_fu_118 = 32'd0;
#0 indvar_flatten12_fu_122 = 92'd0;
#0 indvar_flatten33_fu_126 = 120'd0;
#0 ap_done_reg = 1'b0;
end

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U557(
    .din0(tmp_reg_658),
    .din1(N),
    .dout(empty_1060_fu_208_p2)
);

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U558(
    .din0(empty_1061_fu_212_p0),
    .din1(N),
    .dout(empty_1061_fu_212_p2)
);

top_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U559(
    .din0(tmp_fu_216_p0),
    .din1(C),
    .dout(tmp_fu_216_p2)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_fu_110 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln19_reg_640 == 1'd0))) begin
            c_fu_110 <= select_ln25_fu_471_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_640 == 1'd0))) begin
        first_iter_0_reg_196 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_196 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten12_fu_122 <= 92'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_fu_266_p2 == 1'd0))) begin
            indvar_flatten12_fu_122 <= select_ln22_3_fu_422_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten33_fu_126 <= 120'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_fu_266_p2 == 1'd0))) begin
            indvar_flatten33_fu_126 <= add_ln19_fu_271_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_114 <= 60'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_fu_266_p2 == 1'd0))) begin
            indvar_flatten_fu_114 <= select_ln25_1_fu_408_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            n_1_fu_106 <= 28'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_fu_266_p2 == 1'd0))) begin
            n_1_fu_106 <= select_ln28_fu_394_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            r_fu_118 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln19_fu_266_p2 == 1'd0))) begin
            r_fu_118 <= select_ln22_2_fu_361_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        A_BUS_addr_read_reg_674 <= m_axi_A_BUS_RDATA;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln19_reg_640_pp0_iter10_reg <= icmp_ln19_reg_640_pp0_iter9_reg;
        icmp_ln19_reg_640_pp0_iter11_reg <= icmp_ln19_reg_640_pp0_iter10_reg;
        icmp_ln19_reg_640_pp0_iter2_reg <= icmp_ln19_reg_640;
        icmp_ln19_reg_640_pp0_iter3_reg <= icmp_ln19_reg_640_pp0_iter2_reg;
        icmp_ln19_reg_640_pp0_iter4_reg <= icmp_ln19_reg_640_pp0_iter3_reg;
        icmp_ln19_reg_640_pp0_iter5_reg <= icmp_ln19_reg_640_pp0_iter4_reg;
        icmp_ln19_reg_640_pp0_iter6_reg <= icmp_ln19_reg_640_pp0_iter5_reg;
        icmp_ln19_reg_640_pp0_iter7_reg <= icmp_ln19_reg_640_pp0_iter6_reg;
        icmp_ln19_reg_640_pp0_iter8_reg <= icmp_ln19_reg_640_pp0_iter7_reg;
        icmp_ln19_reg_640_pp0_iter9_reg <= icmp_ln19_reg_640_pp0_iter8_reg;
        or_ln25_reg_654_pp0_iter2_reg <= or_ln25_reg_654;
        trunc_ln_reg_663 <= {{empty_1063_fu_525_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln19_reg_640 <= icmp_ln19_fu_266_p2;
        or_ln22_reg_644 <= or_ln22_fu_341_p2;
        or_ln25_reg_654 <= or_ln25_fu_370_p2;
        p_cast_reg_635[27 : 0] <= p_cast_fu_220_p1[27 : 0];
        select_ln22_1_reg_649 <= select_ln22_1_fu_353_p3;
        tmp_reg_658 <= tmp_fu_216_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln25_reg_654_pp0_iter2_reg == 1'd1))) begin
        A_BUS_blk_n_AR = m_axi_A_BUS_ARREADY;
    end else begin
        A_BUS_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_640_pp0_iter10_reg == 1'd0))) begin
        A_BUS_blk_n_R = m_axi_A_BUS_RVALID;
    end else begin
        A_BUS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_fu_266_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter11_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_640 == 1'd0))) begin
        ap_phi_mux_first_iter_0_phi_fu_200_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_200_p4 = first_iter_0_reg_196;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln19_reg_640_pp0_iter11_reg == 1'd0))) begin
        conv_a_blk_n = conv_a_full_n;
    end else begin
        conv_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_640_pp0_iter11_reg == 1'd0))) begin
        conv_a_write = 1'b1;
    end else begin
        conv_a_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln25_reg_654_pp0_iter2_reg == 1'd1))) begin
        m_axi_A_BUS_ARVALID = 1'b1;
    end else begin
        m_axi_A_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_640_pp0_iter10_reg == 1'd0))) begin
        m_axi_A_BUS_RREADY = 1'b1;
    end else begin
        m_axi_A_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_fu_271_p2 = (indvar_flatten33_fu_126 + 120'd1);

assign add_ln22_1_fu_416_p2 = (indvar_flatten12_fu_122 + 92'd1);

assign add_ln25_1_fu_402_p2 = (indvar_flatten_fu_114 + 60'd1);

assign add_ln28_fu_376_p2 = (n_1_fu_106 + 28'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter12)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter12)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter12)) | ((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage0_iter11)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter11 = ((icmp_ln19_reg_640_pp0_iter10_reg == 1'd0) & (m_axi_A_BUS_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = ((icmp_ln19_reg_640_pp0_iter11_reg == 1'd0) & (conv_a_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((m_axi_A_BUS_ARREADY == 1'b0) & (or_ln25_reg_654_pp0_iter2_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign c_2_fu_465_p2 = (select_ln22_fu_458_p3 + 32'd1);

assign conv_a_din = A_BUS_addr_read_reg_674;

assign empty_1061_fu_212_p0 = ((select_ln22_1_reg_649[0:0] == 1'b1) ? c_2_fu_465_p2 : select_ln22_fu_458_p3);

assign empty_1062_fu_507_p2 = (p_cast5_fu_503_p1 + zext_ln25_fu_489_p1);

assign empty_1063_fu_525_p2 = (p_cast9_fu_521_p1 + A);

assign icmp_ln19_fu_266_p2 = ((indvar_flatten33_fu_126 == bound17) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_280_p2 = ((indvar_flatten12_fu_122 == bound4) ? 1'b1 : 1'b0);

assign icmp_ln25_1_fu_322_p2 = ((indvar_flatten_fu_114 == bound) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_317_p2 = ((bound == 60'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_304_p2 = ((n_1_fu_106 == div) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_299_p2 = ((div == 28'd0) ? 1'b1 : 1'b0);

assign m_axi_A_BUS_ARADDR = sext_ln28_fu_545_p1;

assign m_axi_A_BUS_ARBURST = 2'd0;

assign m_axi_A_BUS_ARCACHE = 4'd0;

assign m_axi_A_BUS_ARID = 1'd0;

assign m_axi_A_BUS_ARLEN = p_cast_reg_635;

assign m_axi_A_BUS_ARLOCK = 2'd0;

assign m_axi_A_BUS_ARPROT = 3'd0;

assign m_axi_A_BUS_ARQOS = 4'd0;

assign m_axi_A_BUS_ARREGION = 4'd0;

assign m_axi_A_BUS_ARSIZE = 3'd0;

assign m_axi_A_BUS_ARUSER = 1'd0;

assign m_axi_A_BUS_AWADDR = 64'd0;

assign m_axi_A_BUS_AWBURST = 2'd0;

assign m_axi_A_BUS_AWCACHE = 4'd0;

assign m_axi_A_BUS_AWID = 1'd0;

assign m_axi_A_BUS_AWLEN = 32'd0;

assign m_axi_A_BUS_AWLOCK = 2'd0;

assign m_axi_A_BUS_AWPROT = 3'd0;

assign m_axi_A_BUS_AWQOS = 4'd0;

assign m_axi_A_BUS_AWREGION = 4'd0;

assign m_axi_A_BUS_AWSIZE = 3'd0;

assign m_axi_A_BUS_AWUSER = 1'd0;

assign m_axi_A_BUS_AWVALID = 1'b0;

assign m_axi_A_BUS_BREADY = 1'b0;

assign m_axi_A_BUS_WDATA = 512'd0;

assign m_axi_A_BUS_WID = 1'd0;

assign m_axi_A_BUS_WLAST = 1'b0;

assign m_axi_A_BUS_WSTRB = 64'd0;

assign m_axi_A_BUS_WUSER = 1'd0;

assign m_axi_A_BUS_WVALID = 1'b0;

assign or_ln19_fu_293_p2 = (icmp_ln22_fu_280_p2 | ap_phi_mux_first_iter_0_phi_fu_200_p4);

assign or_ln22_1_fu_347_p2 = (select_ln19_2_fu_327_p3 | or_ln19_fu_293_p2);

assign or_ln22_fu_341_p2 = (select_ln19_2_fu_327_p3 | icmp_ln22_fu_280_p2);

assign or_ln25_fu_370_p2 = (select_ln22_1_fu_353_p3 | or_ln22_1_fu_347_p2);

assign or_ln28_1_fu_388_p2 = (or_ln28_fu_382_p2 | icmp_ln22_fu_280_p2);

assign or_ln28_fu_382_p2 = (select_ln22_1_fu_353_p3 | select_ln19_2_fu_327_p3);

assign p_cast5_fu_503_p1 = tmp_3_fu_493_p4;

assign p_cast9_fu_521_p1 = tmp_4_fu_513_p3;

assign p_cast_fu_220_p1 = empty;

assign r_4_fu_335_p2 = (select_ln19_fu_285_p3 + 32'd1);

assign select_ln19_1_fu_309_p3 = ((icmp_ln22_fu_280_p2[0:0] == 1'b1) ? icmp_ln28_fu_299_p2 : icmp_ln28_1_fu_304_p2);

assign select_ln19_2_fu_327_p3 = ((icmp_ln22_fu_280_p2[0:0] == 1'b1) ? icmp_ln25_fu_317_p2 : icmp_ln25_1_fu_322_p2);

assign select_ln19_fu_285_p3 = ((icmp_ln22_fu_280_p2[0:0] == 1'b1) ? 32'd0 : r_fu_118);

assign select_ln22_1_fu_353_p3 = ((select_ln19_2_fu_327_p3[0:0] == 1'b1) ? icmp_ln28_fu_299_p2 : select_ln19_1_fu_309_p3);

assign select_ln22_2_fu_361_p3 = ((select_ln19_2_fu_327_p3[0:0] == 1'b1) ? r_4_fu_335_p2 : select_ln19_fu_285_p3);

assign select_ln22_3_fu_422_p3 = ((icmp_ln22_fu_280_p2[0:0] == 1'b1) ? 92'd1 : add_ln22_1_fu_416_p2);

assign select_ln22_fu_458_p3 = ((or_ln22_reg_644[0:0] == 1'b1) ? 32'd0 : c_fu_110);

assign select_ln25_1_fu_408_p3 = ((or_ln22_fu_341_p2[0:0] == 1'b1) ? 60'd1 : add_ln25_1_fu_402_p2);

assign select_ln25_fu_471_p3 = ((select_ln22_1_reg_649[0:0] == 1'b1) ? c_2_fu_465_p2 : select_ln22_fu_458_p3);

assign select_ln28_fu_394_p3 = ((or_ln28_1_fu_388_p2[0:0] == 1'b1) ? 28'd1 : add_ln28_fu_376_p2);

assign sext_ln28_fu_545_p1 = $signed(trunc_ln_reg_663);

assign tmp_3_fu_493_p4 = {{empty_1061_fu_212_p2[31:4]}};

assign tmp_4_fu_513_p3 = {{empty_1062_fu_507_p2}, {6'd0}};

assign tmp_fu_216_p0 = ((select_ln19_2_fu_327_p3[0:0] == 1'b1) ? r_4_fu_335_p2 : select_ln19_fu_285_p3);

assign tmp_s_fu_479_p4 = {{empty_1060_fu_208_p2[31:4]}};

assign zext_ln25_fu_489_p1 = tmp_s_fu_479_p4;

always @ (posedge ap_clk) begin
    p_cast_reg_635[31:28] <= 4'b0000;
end

endmodule //top_ConvertInputToStream_Pipeline_VITIS_LOOP_19_1_VITIS_LOOP_22_2_VITIS_LOOP_25_3_VI
